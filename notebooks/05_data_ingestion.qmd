---
title   : EAISI - Pythia
subtitle: Data Ingestion
author  : "F.J. Padt"
date    : "`r format(Sys.time(), '%B %d, %Y')`"
output  :
  pdf_document:
    df_print: paged
    toc: yes
    toc_depth: 1      
editor_options:
  chunk_output_type: console
  markdown: 
    wrap: 80  
---

\newpage

![Logo](C:/PW\OneDrive\ET\pythia\img\pythia_logo2_no_text.png)

# Purpose

Refresh data sets for the Pythia project from BW OpenHub to Pythia on PET. The
data sets are used to validate the Pythia model.

This code needs to run in Ecotone Network and SAP should be available

# Setup

```{r}
#| label:  setup
#| eval:   true

# knitr::opts_chunk$set(
#   cache   = FALSE,
#   echo    = TRUE,     # include R source code in the output  
#   # eval    = TRUE,
#   message = FALSE,
#   warning = FALSE,
#   results = "markup",
#   image   = TRUE,  
#   include = TRUE      # include the chunk output in the output 
# )

SID <- "WPB500"
SYS <- substr(SID, 1, 3)

# SAP Access
# library(reticulate)
# use_condaenv("sapyr")

# public functions ---------------------------------------------------------
invisible(source('library/KnitR_SetUp.R'))

lsrc <- "notebooks/05_data_ingestion.R"  
if( file.exists(lsrc)){source(lsrc)}

# B4_RSDSSEGFD <- 
#   fread(file = file.path(PS01, SYS, "B4", "B4_RSDSSEGFD.csv"))
# 
# B4_RSBOHFIELDS <- 
#   fread(file = file.path(PS01, SYS, "B4", "B4_RSBOHFIELDS.csv"))
# 
# B4_FILENAMECI <- 
#   fread(file = file.path(PS01, SYS, "B4", "B4_FILENAMECI"))
```

```{r}
#| label: 'get path'
#| eval:   false
#| 
clipr::write_clip(
  normalizePath(
    file.path(PS01, SYS, "RTP", "OB")))
```

# Export & Copy Procedure

## Pythia DTP's

| Seq. | DTP | Description | Time |
|-------------------|-------------------|-------------------|-----------------------|
| 0 | DTP_006EIZGR39XAWQANS1LNUZF2Y | Pythia's Advice -\> IS PERKZ-W \[2021\] Incl.FR50 | 15 min. |
| 0 | DTP_006EIZGR39XAWQANYOZZI4HSQ | Pythia's Advice -\> IS PERKZ-W \[2022\] Incl.FR50 |  |
| 0 | DTP_006EIZGR39XAWQANZ3O0NUFIY | Pythia's Advice -\> IS PERKZ-W \[2023\] Incl.FR50 |  |
| 1 | DTP_006EIZGR39XAWQANZFHWJ64UY |  |  |
| 2 | DTP_006EIZGR39XAWPP4O3JPT9E6Y | PYTHIA -\> IS PERKZ-W \[\>=2024\] | 05 min |
| 3 | DTP_006EIZGR39XAWPP4SWFV127TM | OS PERKZ-W \[\>=SY-DATE - 60\] | 02 min |

## Export

1.  \[15. Min\] RSPC: LC_DYN_PERKZ_W
2.  \[05. Min\] DTP_006EIZGR39XAWPP4O3JPT9E6Y PYTHIA -\> IS PERKZ-W \[\>=2024\]
3.  AL11 - DSCP E:\USR\SAP\STAGE\DSCP\PERKZ\_W\
4.  save PRTP
    1.  TMP execute next code chunk to change Thousands Separator
5.  

## Transaction Data

```{r}
#| label: 'get Header DD_SALES_QTY'
#| eval:   false
 
# HDR <-  
#   fread( 
#     file = file.path(PS01, SYS, "RTP", "CSV", paste0("S_DD_SALES_QTY.CSV")), 
#     header = TRUE, skip=5 
#   ) 
```

### Outbound

#### Functions

```{r}
#| label: 'Outbound - Data Ingestion Functions'
#| eval:   true

# Configuration parameters of Open Hub DSCP_TRAN
FILE_SPEC <- 
  list(
    DELIM        = ';',
    HEADER       = FALSE,
    DATE_FORMAT  = '%Y-%m-%d'
  )

DSCP_OUT_PIPE_LINE <- 
  fread(text = "
        FLDNM_IN  | FIELDTP| TRNSFRM                     | FLDNM_OUT
        MATERIAL  | VARCHAR| lpad(MATERIAL, 18, '0')     | MATERIAL
        CUSTOMER  | VARCHAR| lpad(CUSTOMER, 10, '0')     | SOLDTO
        PLANT     | VARCHAR| PLANT                       | PLANT
        SALESORG  | VARCHAR| SALESORG                    | SALESORG
        CALDAY    | DATE   | CALDAY                      | CALDAY
                  |        | DATE_TRUNC('month', CALDAY) | CALMONTH
        SLS_QT_SO | FLOAT  | SLS_QT_SO                   | SLS_QT_SO
        SLS_QT_RET| FLOAT  | SLS_QT_RET                  | SLS_QT_RET
        SLS_QT_FOC| FLOAT  | SLS_QT_FOC                  | SLS_QT_FOC
        SLS_QT_DIR| FLOAT  | SLS_QT_DIR                  | SLS_QT_DIR
        SLS_QT_PRO| FLOAT  | SLS_QT_PRO                  | SLS_QT_PRO
        SLS_QT_IC | FLOAT  | SLS_QT_IC                   | SLS_QT_IC
        MSQTBUO   | FLOAT  | MSQTBUO                     | MSQTBUO",
        sep = "|"  
  ) 

```

#### Execution

```{r}
#| label: 'Data Ingestion Execution from Bronze (S1B) to Silver (S2S)'
#| eval:   true

# generate file names per year
fls <- 
  23:24                         %>%  
  paste0("DD_SALES_QTY_20", .)

# Define file paths
farea_path  <- file.path(SYS, "RTP", "OB")
input_path  <- file.path(PS01, farea_path)
output_path <- file.path(PS02, farea_path)

# Run the main function
purrr::walk(
  fls, transform_csv_to_parquet, input_path, output_path, 
  FILE_SPEC, DSCP_OUT_PIPE_LINE, verbose = TRUE
)

```

### Inbound

#### Functions

```{r}
#| label: 'Inbound - Data Ingestion Functions'
#| eval:   true

# Configuration parameters of Open Hub DSCP_TRAN
FILE_SPEC <- 
  list(
    DELIM        = ';',
    HEADER       = FALSE,
    DATE_FORMAT  = '%Y-%m-%d'
  )

# DSCP_IN_PIPE_LINE <- 
#   fread(text = "
#         FLDNM_IN              | FIELDTP | TRNSFRM                | FLDNM_OUT
#         CREATION_DATE         | VARCHAR    | CREATION_DATE          | UPDATE_DATE
#         DFU_CODE              | VARCHAR | DFU_CODE               | 
#         MATERIAL_CODE         | VARCHAR | MATERIAL_CODE          | MATERIAL_CODE
#         CUSTOMERL3_CODE       | VARCHAR | CUSTOMERL3_CODE        | 
#         CL3_CODE              | VARCHAR | CL3_CODE               | CL3_CODE
#         CL2_CODE              | VARCHAR | CL2_CODE               | CL2_CODE
#         CL1_CODE              | VARCHAR | CL1_CODE               | CL1_CODE
#         PLANT_CODE            | VARCHAR | PLANT_CODE             | PLANT_CODE
#         SALESORG_CODE         | VARCHAR | SALESORG_CODE          | SALESORG_CODE
#         PERIOD_CODE           | VARCHAR | PERIOD_CODE            | PERIOD_CODE
#         TOTAL_DEMAND_QTY      | VARCHAR   | TOTAL_DEMAND_QTY       | TOTAL_DEMAND_QTY
#         BASE_LINE_QTY         | VARCHAR   | BASE_LINE_QTY          | BASE_LINE_QTY
#         PROMO_QTY             | VARCHAR   | PROMO_QTY              | PROMO_QTY
#         TOTAL_DEMAND_COMP_QTY | VARCHAR   | TOTAL_DEMAND_COMP_QTY  | TOTAL_DEMAND_COMP_QTY
#         PROMO_COMP_QTY        | VARCHAR   | PROMO_COMP_QTY         | PROMO_COMP_QTY
#         BASEUNITOFMEASURE_CODE| VARCHAR | BASEUNITOFMEASURE_CODE | BASEUNITOFMEASURE_CODE",
#         sep = "|"  
#   ) 

FRPR_IN_PIPE_LINE <- 
  fread(text = "
          FLDNM_IN              | FIELDTP    | TRNSFRM                | FLDNM_OUT
          COMP_CODE             | VARCHAR    | COMP_CODE              | COMP_CODE
          SALESORG              | VARCHAR    | SALESORG               | SALESORG
          PLANT                 | VARCHAR    | PLANT                  | PLANT 
          MATERIAL              | VARCHAR    | MATERIAL               | MATERIAL 
          CUST_HIE03            | VARCHAR    | CUST_HIE03             | CUST_HIE03
          CALMONTH              | VARCHAR    | CALMONTH               | CALMONTH
          VTYPE                 | VARCHAR    | VTYPE                  | VTYPE 
          FTYPE                 | VARCHAR    | FTYPE                  | FTYPE
          VERSMON               | VARCHAR    | VERSMON                | VERSMON 
          RECORDMODE            | VARCHAR    | RECORDMODE             | RECORDMODE 
          UPD_DATE              | VARCHAR    | UPD_DATE               | UPD_DATE
          CUST_HIE02            | VARCHAR    | CUST_HIE02             | CUST_HIE02 
          CUST_HIE01            | VARCHAR    | CUST_HIE01             | CUST_HIE01 
          DEMND_QTY             | VARCHAR    | DEMND_QTY              | DEMND_QTY 
          BSELN_QTY             | VARCHAR    | BSELN_QTY              | BSELN_QTY 
          PROMO_QTY             | VARCHAR    | PROMO_QTY              | PROMO_QTY 
          DMDCP_QTY             | VARCHAR    | DMDCP_QTY              | DMDCP_QTY 
          PRMCP_QTY             | VARCHAR    | PRMCP_QTY              | PRMCP_QTY
          BASE_UOM              | VARCHAR    | BASE_UOM               | BASE_UOM",
        sep = "|"
  )
```

#### Execution

```{r}
#| label: 'Data Ingestion Execution from Bronze (S1B) to Silver (S2S)'
#| eval:   true

# Configuration parameters of DataSources:
# - BEFOREDR_ACTUALS
# - BEFOREDR_FORECASTS
# - AFTERDR_ACTUALS
# - AFTERDR_FORECASTS

# generate file names per year
fls <- 
  c(
    "SDSFRPR1_12",
    "SDSFRPR3_12"
  )

# Define file paths
farea_path  <- file.path(SYS, "DYN")
input_path  <- file.path(PS01, farea_path)
output_path <- file.path(PS02, farea_path)

# Run the main function
purrr::walk(
  fls, transform_csv_to_parquet, input_path, output_path, 
  FILE_SPEC, FRPR_IN_PIPE_LINE, verbose = TRUE
)

```

```{r}
#| label: 'functions'
#| eval:  true

getHeaderDataSource <-
  function(x){
    fread(file = file.path(PS01, SYS, "B4", "B4_RSDSSEGFD.csv"))     %T>%
    setorder(DATASOURCE, POSIT)                                       %>%
    .[DATASOURCE == x, FIELDNM]
}

```

```{r}
#| label: 'Data Ingestion Execution'
#| eval:   true

files_Inbound <- 
  list.files(file.path(PS01, SYS, "RTP", "IB"), pattern = "*.CSV", full.names = TRUE)

PRE_A <-  fread(
  cmd = paste0("iconv -f UTF-16 -t UTF-8 '", files_Inbound[1], "'")
) %T>%
setnames(getHeaderDataSource("PRE_A")) 


empty_unit <- PRE_A[BASEUNITOFMEASURE_CODE == ""]
neg_baseln <- PRE_A[BASE_LINE_QTY < 0]


```

## Master Data

### Material

#### MATERIAL

```{r}
#| label: 'MATERIAL'
#| eval:   true

pAREA <- "MATERIAL"
MATERIAL <- 
  fLoadOpenHubExport(
    pAREA = pAREA,  
    pKEY  = c(pAREA),
    pPTH  = file.path(PS01, SYS, "RTP", "CSV")
  )                                                                       %>% 
 .[, MATERIAL:= LP0(MATERIAL, 18)]                                        %T>%
  setcolorder("MATERIAL")                                                 %T>%
  write_parquet(
    sink = file.path(
      PS02, SYS, "RTP",  
      paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
    )
  )

```

#### MAT_SALES

```{r}
#| label: 'MAT_SALES',
#| eval:   true

pAREA <- "MAT_SALES"
MAT_SALES <- 
  fLoadOpenHubExport(
    pAREA = pAREA,  
    pPTH  = file.path(PS01, SYS, "RTP", "CSV")
  )                                                                       %>%
  .[, DISTR_CHAN:= 10]                                                    %>%
  .[, `:=` (MAT_SALES = LP0(MATERIAL, 18), MATERIAL = NULL)]              %T>%
  setcolorder(c("MAT_SALES", "SALESORG", "DISTR_CHAN"))                   %T>%       
  setkey("MAT_SALES", "SALESORG", "DISTR_CHAN")                           %T>%
  write_parquet(
    sink = file.path(
      PS02, SYS, "RTP", 
      paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
    )
  )                                                              

```

#### MAT_PLANT

```{r}
#| label: 'MAT_PLANT',
#| eval:   true

pAREA <- "MAT_PLANT"
MAT_PLANT <- 
  fLoadOpenHubExport(
    pAREA = pAREA,  
    pKEY  = c("MAT_PLANT", "PLANT"),
    pPTH  = file.path(PS01, SYS, "RTP", "CSV")
  )                                                                       %>%
  .[, `:=` (MAT_PLANT = LP0(MAT_PLANT, 18))]                              %T>%
  setcolorder(c("MAT_PLANT", "PLANT"))                                    %T>%       
  setkey("MAT_PLANT", "PLANT")                                            %T>%
  write_parquet(
    sink = file.path(
      PS02, SYS, "RTP", 
      paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
    )
  ) 
```

### Customer

#### CUST_SALES

```{r}
#| label: 'CUST_SALES',
#| eval:   true

pAREA <- "SOLDTO"
CUST_SALES <- 
  fLoadOpenHubExport(
    pAREA = pAREA,  
    # pKEY  = c("MAT_PLANT", "PLANT"),
    pPTH  = file.path(PS01, SYS, "RTP", "CSV")
  )                                                                       %>%
  .[, `:=` (
    CUST_SALES = LP0(CUSTOMER  , 10), 
    CUSTHIE04  = LP0(CUSTHIE04 , 10), 
    CUST_HIE03 = LP0(CUST_HIE03, 10), 
    CUST_HIE02 = LP0(CUST_HIE02, 10), 
    CUST_HIE01 = LP0(CUST_HIE01, 10),     
    DISTR_CHAN = 10, 
    CUSTOMER   = NULL
    )]                                                                    %T>%
  setcolorder(c("CUST_SALES", "SALESORG", "DISTR_CHAN"))                  %T>%         
  setkey("CUST_SALES", "SALESORG", "DISTR_CHAN")                          %T>%
  write_parquet(
    sink = file.path(
      PS02, SYS, "RTP",  
      paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
    )
  ) 
```

### Stock

```{r}
#| label: 'Stock'
#| eval:   true

pAREA <- "STOCK"
STK <- 
  fLoadOpenHubExport(
    pAREA = pAREA,  
    # pKEY  = c("MAT_PLANT", "PLANT"),
    pPTH  = file.path(PS01, SYS, "STK", "CSV")
  )                                                              %T>%         
  setkey("CALDAY", "MATERIAL", "PLANT")                          %T>%
  write_parquet(
    sink = file.path(
      PS02, SYS, "STK", 
      paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
    )
  ) 

```

### Promotions

#### PromoNat

```{r}
#| label: 'PROMO'
#| eval:   true

REL_FLDS <- 
  wb_to_df(
    file  = file.path(PS01, "PRM", "PROMONAT.xlsx"),
    sheet = "FIELDS",
    cols  = c(2, 4, 5)
  )                         %>%
  setDT()                   %>%
  .[RELEVANT == "YES", COL] %>%
  sort()

PROMONAT <-
  wb_to_df(
    file  = file.path(PS01, "PRM", "PROMONAT.xlsx"),
    sheet = "PROMONAT",
    cols  = REL_FLDS
  )                                                           %T>%
  write_parquet(
    sink = file.path(
      PS02, "PRM", 
      "PROMONAT.parquet"
    )
  )                                                     

CR_PR_PROMO_CL2_HEADER <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL2_HEADER.CSV")
  )

CR_PR_PROMO_CL2_LINE <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL2_LINE.CSV")
  )

CR_PR_PROMO_CL3_HEADER <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL3_HEADER.CSV")
  )

CR_PR_PROMO_CL3_LINE <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL3_LINE.CSV")
  )
```
