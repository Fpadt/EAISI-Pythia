---
title   : EAISI - Pythia
subtitle: Data Ingestion
author  : "F.J. Padt"
date    : "`r format(Sys.time(), '%B %d, %Y')`"
output  :
  pdf_document:
    df_print: paged
    toc: yes
    toc_depth: 1      
editor_options:
  chunk_output_type: console
  markdown: 
    wrap: 80  
---

\newpage

![Logo](../images/logo.png)

# Purpose

Refresh data sets for the Pythia project from BW OpenHub to Pythia on 
OneDrive ET. 

::: {.callout-note}
Can be executed outside Ecotone Network as OneDrive ET\Pythia is used
:::

# Setup

```{r}
#| label:  setup
#| eval:   true

# knitr::opts_chunk$set(
#   cache   = FALSE,
#   echo    = TRUE,     # include R source code in the output  
#   # eval    = TRUE,
#   message = FALSE,
#   warning = FALSE,
#   results = "markup",
#   image   = TRUE,  
#   include = TRUE      # include the chunk output in the output 
# )

SID <- "WPB500"
SYS <- substr(SID, 1, 3)

# SAP Access
# library(reticulate)
# use_condaenv("sapyr")

# public functions ---------------------------------------------------------
invisible(source('library/KnitR_SetUp.R'))

lsrc <- "notebooks/05_data_ingestion.R"  
if( file.exists(lsrc)){source(lsrc)}

# Configuration parameters of Open Hub DSCP_TRAN
FILE_SPEC <- 
  list(
    DELIM        = ';',
    HEADER       = FALSE,
    DATE_FORMAT  = '%Y-%m-%d'
  )

```

# Export & Copy Procedure

## Pythia DTP's

| Seq. | DTP | Description | Time |
|--------------------|--------------------|--------------------|---------------------|
| 0 | DTP_006EIZGR39XAWQANS1LNUZF2Y | Pythia's Advice -\> IS PERKZ-W \[2021\] Incl.FR50 | 15 min. |
| 0 | DTP_006EIZGR39XAWQANYOZZI4HSQ | Pythia's Advice -\> IS PERKZ-W \[2022\] Incl.FR50 |  |
| 0 | DTP_006EIZGR39XAWQANZ3O0NUFIY | Pythia's Advice -\> IS PERKZ-W \[2023\] Incl.FR50 |  |
| 1 | DTP_006EIZGR39XAWQANZFHWJ64UY |  |  |
| 2 | DTP_006EIZGR39XAWPP4O3JPT9E6Y | PYTHIA -\> IS PERKZ-W \[\>=2024\] | 05 min |
| 3 | DTP_006EIZGR39XAWPP4SWFV127TM | OS PERKZ-W \[\>=SY-DATE - 60\] | 02 min |

## Export

1.  \[15. Min\] RSPC: LC_DYN_PERKZ_W
2.  \[05. Min\] DTP_006EIZGR39XAWPP4O3JPT9E6Y PYTHIA -\> IS PERKZ-W \[\>=2024\]
3.  AL11 - DSCP E:\USR\SAP\STAGE\DSCP\PERKZ\_W\
4.  save PRTP
    1.  TMP execute next code chunk to change Thousands Separator
5.  

## Administration

```{r}
shell.exec(file.path(PS01, SYS, "B4","IB_OB_FLD.xlsx"))
```


## Transaction Data

### Outbound

#### Sales RTP

Transform .csv files in Bronze to .parquet in Silver

```{r}
#| label:   'Sales to Dynasys RTP'
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)'
#| eval:    true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^DD_SALES_QTY_20.*\\.csv$",   
  ohdest       = "DSCP_TRAN",
  verbose      = TRUE
)

```

#### Sales IPM

Transform .csv files in Bronze to .parquet in Silver

```{r}
#| label:   'Sales to Dynasys 2018'
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)'
#| eval:    true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "IPM"),
  output_path  = file.path(PS02, SYS, "IPM"),
  file_pattern = "^DD_HISTO_QTY_20.*\\.csv$",   
  ohdest       = "ZSOP_ASLS",
  verbose      = TRUE
)

```

#### Stock

```{r}
#| label:   'Stock from BW' 
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)' 
#| eval:    true  

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "STK"),
  output_path  = file.path(PS02, SYS, "STK"),
  file_pattern = "^IMP03SM1.*\\.csv$",   
  ohdest       = "OH_STOCK",
  verbose      = TRUE
)

```

### Inbound

#### Sales DYN

Transform .csv files in Bronze to .parquet in Silver

```{r}
#| label:   'Sales from Dynasys 2018'
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)'
#| eval:    true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "DYN"),
  output_path  = file.path(PS02, SYS, "DYN"),
  file_pattern = "^SDSFRPR[1234].*\\.csv$",   
  ohdest       = "OH_FRPR1",
  verbose      = TRUE
)

```

# Obsolete ? 

```{r}
#| label: 'functions'
#| eval:  false

getHeaderDataSource <-
  function(x){
    fread(file = file.path(PS01, SYS, "B4", "B4_RSDSSEGFD.csv"))     %T>%
    setorder(DATASOURCE, POSIT)                                       %>%
    .[DATASOURCE == x, FIELDNM]
}

```

```{r}
#| label: 'Data Ingestion Execution'
#| eval:   false

files_Inbound <- 
  list.files(file.path(PS01, SYS, "RTP", "IB"), pattern = "*.CSV", full.names = TRUE)

PRE_A <-  fread(
  cmd = paste0("iconv -f UTF-16 -t UTF-8 '", files_Inbound[1], "'")
) %T>%
setnames(getHeaderDataSource("PRE_A")) 


empty_unit <- PRE_A[BASEUNITOFMEASURE_CODE == ""]
neg_baseln <- PRE_A[BASE_LINE_QTY < 0]


```

## Master Data

### Material

#### MATERIAL

```{r}
#| label: 'MATERIAL'
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_MATERIAL.*\\.csv$",   
  ohdest       = "DSCP_MATE",
  verbose      = TRUE
)

# pAREA <- "MATERIAL"
# MATERIAL <- 
#   fLoadOpenHubExport(
#     pAREA = pAREA,  
#     pKEY  = c(pAREA),
#     pPTH  = file.path(PS01, SYS, "RTP", "CSV")
#   )                                                                       %>% 
#  .[, MATERIAL:= LP0(MATERIAL, 18)]                                        %T>%
#   setcolorder("MATERIAL")                                                 %T>%
#   write_parquet(
#     sink = file.path(
#       PS02, SYS, "RTP",  
#       paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
#     )
#   )

```

#### MAT_SALES

```{r}
#| label: 'MAT_SALES',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_MATERIAL_SALES_ORG.*\\.csv$",   
  ohdest       = "DSCP_MATS",
  verbose      = TRUE
)
# 
# pAREA <- "MAT_SALES"
# MAT_SALES <- 
#   fLoadOpenHubExport(
#     pAREA = pAREA,  
#     pPTH  = file.path(PS01, SYS, "RTP", "CSV")
#   )                                                                       %>%
#   .[, DISTR_CHAN:= 10]                                                    %>%
#   .[, `:=` (MAT_SALES = LP0(MATERIAL, 18), MATERIAL = NULL)]              %T>%
#   setcolorder(c("MAT_SALES", "SALESORG", "DISTR_CHAN"))                   %T>%       
#   setkey("MAT_SALES", "SALESORG", "DISTR_CHAN")                           %T>%
#   write_parquet(
#     sink = file.path(
#       PS02, SYS, "RTP", 
#       paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
#     )
#   )                                                              

```

#### MAT_PLANT

```{r}
#| label: 'MAT_PLANT',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_MATERIAL_PLANT.*\\.csv$",   
  ohdest       = "DSCP_MATP",
  verbose      = TRUE
)

# pAREA <- "MAT_PLANT"
# MAT_PLANT <- 
#   fLoadOpenHubExport(
#     pAREA = pAREA,  
#     pKEY  = c("MAT_PLANT", "PLANT"),
#     pPTH  = file.path(PS01, SYS, "RTP", "CSV")
#   )                                                                       %>%
#   .[, `:=` (MAT_PLANT = LP0(MAT_PLANT, 18))]                              %T>%
#   setcolorder(c("MAT_PLANT", "PLANT"))                                    %T>%       
#   setkey("MAT_PLANT", "PLANT")                                            %T>%
#   write_parquet(
#     sink = file.path(
#       PS02, SYS, "RTP", 
#       paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
#     )
#   ) 
```

### Customer

#### CUST_SALES

```{r}
#| label: 'CUST_SALES',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_SOLD_TO_CUSTOMER.*\\.csv$",   
  ohdest       = "DSCP_CUST",
  verbose      = TRUE
)

# pAREA <- "SOLDTO"
# CUST_SALES <- 
#   fLoadOpenHubExport(
#     pAREA = pAREA,  
#     # pKEY  = c("MAT_PLANT", "PLANT"),
#     pPTH  = file.path(PS01, SYS, "RTP", "CSV")
#   )                                                                       %>%
#   .[, `:=` (
#     CUST_SALES = LP0(CUSTOMER  , 10), 
#     CUSTHIE04  = LP0(CUSTHIE04 , 10), 
#     CUST_HIE03 = LP0(CUST_HIE03, 10), 
#     CUST_HIE02 = LP0(CUST_HIE02, 10), 
#     CUST_HIE01 = LP0(CUST_HIE01, 10),     
#     DISTR_CHAN = 10, 
#     CUSTOMER   = NULL
#     )]                                                                    %T>%
#   setcolorder(c("CUST_SALES", "SALESORG", "DISTR_CHAN"))                  %T>%         
#   setkey("CUST_SALES", "SALESORG", "DISTR_CHAN")                          %T>%
#   write_parquet(
#     sink = file.path(
#       PS02, SYS, "RTP",  
#       paste0(CFG[EXP == "NEW" & AREA == pAREA, BNM], ".parquet")
#     )
#   ) 
```

### Plant

```{r}
#| label: 'PLANT',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_PLANT.*\\.csv$",   
  ohdest       = "DSCP_PLNT",
  verbose      = TRUE
)
```

### Sales Organization

```{r}
#| label: 'SALESORG',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_SALES_ORG.*\\.csv$",   
  ohdest       = "DSCP_SORG",
  verbose      = TRUE
)
```

### BOM Explosion

```{r}
#| label: 'BOMX',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_BOM.*\\.csv$",   
  ohdest       = "DSCP_BOMX",
  verbose      = TRUE
)
```

### Promotions

#### PromoNat

```{r}
#| label: 'PROMO'
#| eval:   true

REL_FLDS <- 
  wb_to_df(
    file  = file.path(PS01, "PRM", "PROMONAT.xlsx"),
    sheet = "FIELDS",
    cols  = c(2, 4, 5)
  )                         %>%
  setDT()                   %>%
  .[RELEVANT == "YES", COL] %>%
  sort()

PROMONAT <-
  wb_to_df(
    file  = file.path(PS01, "PRM", "PROMONAT.xlsx"),
    sheet = "PROMONAT",
    cols  = REL_FLDS
  )                                                           %T>%
  write_parquet(
    sink = file.path(
      PS02, "PRM", 
      "PROMONAT.parquet"
    )
  )                                                     

CR_PR_PROMO_CL2_HEADER <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL2_HEADER.CSV")
  )

CR_PR_PROMO_CL2_LINE <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL2_LINE.CSV")
  )

CR_PR_PROMO_CL3_HEADER <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL3_HEADER.CSV")
  )

CR_PR_PROMO_CL3_LINE <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL3_LINE.CSV")
  )
```
