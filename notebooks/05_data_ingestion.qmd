---
title   : EAISI - Pythia
subtitle: Data Ingestion
author  : "F.J. Padt"
date    : "`r format(Sys.time(), '%B %d, %Y')`"
output  :
  pdf_document:
    df_print: paged
    toc: yes
    toc_depth: 1      
editor_options:
  chunk_output_type: console
  markdown: 
    wrap: 80  
---

\newpage

![Logo](../images/logo.png)

# Purpose

Refresh data sets for the Pythia project from BW OpenHub to Pythia on OneDrive
ET.

::: callout-note
Can be executed outside Ecotone Network as OneDrive ET\Pythia is used
:::

# Setup

```{r}
#| label:  setup
#| eval:   true

# knitr::opts_chunk$set(
#   cache   = FALSE,
#   echo    = TRUE,     # include R source code in the output  
#   # eval    = TRUE,
#   message = FALSE,
#   warning = FALSE,
#   results = "markup",
#   image   = TRUE,  
#   include = TRUE      # include the chunk output in the output 
# )

SID <- "WPB500"
SYS <- substr(SID, 1, 3)

# SAP Access
# library(reticulate)
# use_condaenv("sapyr")

# public functions ---------------------------------------------------------
invisible(source('library/KnitR_SetUp.R'))

lsrc <- "notebooks/05_data_ingestion.R"  
if( file.exists(lsrc)){source(lsrc)}

# Configuration parameters of Open Hub DSCP_TRAN
FILE_SPEC <- 
  list(
    DELIM        = ';',
    HEADER       = FALSE,
    DATE_FORMAT  = '%Y-%m-%d'
  )

```

# Export & Copy Procedure

## Administration

```{r}
shell.exec(file.path(PS01, SYS, "B4","IB_OB_FLD.xlsx"))
```

## PipeLines

Use following code to check Pipelines and Transformations

```{r}
View(fGetPipeLines())
```

# Transaction Data

EPS_DELETE_FILE

e:\usr\sap\stage\DSCP
e:\usr\sap\stage\Dynasys\out
 

## Outbound

### Sales RTP

Transform .csv files in Bronze to .parquet in Silver

```{r}
#| label:   'Sales to Dynasys RTP'
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)'
#| eval:    true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^DD_SALES_QTY_202[45].*\\.csv$",   
  ohdest       = "DSCP_TRAN",
  verbose      = TRUE
)

```

### Sales IPM

Transform .csv files in Bronze to .parquet in Silver

```{r}
#| label:   'Sales to Dynasys 2018'
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)'
#| eval:    true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "IPM"),
  output_path  = file.path(PS02, SYS, "IPM"),
  file_pattern = "^DD_HISTO_QTY_202[45].*\\.csv$",   
  ohdest       = "ZSOP_ASLS",
  verbose      = TRUE
)

```

### Stock

```{r}
#| label:   'Stock from BW' 
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)' 
#| eval:    true  

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "STK"),
  output_path  = file.path(PS02, SYS, "STK"),
  file_pattern = "^IMP03SM1.*\\.csv$",   
  ohdest       = "OH_STOCK",
  verbose      = TRUE
)

```

## Inbound

### Sales DYN

Transform .csv files in Bronze to .parquet in Silver

```{r}
#| label:   'Sales from Dynasys 2018'
#| comment: 'Ingestion from Bronze (S1B) to Silver (S2S)'
#| eval:    true

# fTransform_csv_to_parquet(
#   source_path  = file.path(PS01, SYS, "DYN"),
#   output_path  = file.path(PS02, SYS, "DYN"),
#   file_pattern = "^SDSFRPR[1234].*\\.csv$",   
#   ohdest       = "OH_FRPR1",
#   verbose      = TRUE
# )

# actuals
fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "DYN"),
  output_path  = file.path(PS02, SYS, "DYN"),
  file_pattern = "^SDSFRPR[13].*\\.csv$",   
  ohdest       = "OH_FRPR1",
  verbose      = FALSE
)

# forecasts
fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "DYN"),
  output_path  = file.path(PS02, SYS, "DYN"),
  file_pattern = "^SDSFRPR[24]_202(412|501).*\\.csv$",   
  ohdest       = "OH_FRPR1",
  verbose      = FALSE
)

```



# Master Data

## Material

### MATERIAL

```{r}
#| label: 'MATERIAL'
#| eval:   true

# !!!!File needs to be Converted to UTF-8

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_MATERIAL\\.csv$",   
  ohdest       = "DSCP_MATE",
  verbose      = TRUE
)

```

### MAT_SALES

```{r}
#| label: 'MAT_SALES',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_MATERIAL_SALES_ORG\\.csv$",   
  ohdest       = "DSCP_MATS",
  verbose      = TRUE
)

```

### MAT_PLANT

```{r}
#| label: 'MAT_PLANT',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_MATERIAL_PLANT\\.csv$",   
  ohdest       = "DSCP_MATP",
  verbose      = TRUE
)

```

### BOMX

```{r}
#| label: 'BOMX',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_BOM.*\\.csv$",   
  ohdest       = "DSCP_BOMX",
  verbose      = TRUE
)
```

## Customer

### CUST_SALES

```{r}
#| label: 'CUST_SALES',
#| eval:   true

# !!!! UTF-8 conversion

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_SOLD_TO_CUSTOMER\\.csv$",   
  ohdest       = "DSCP_CUST",
  verbose      = TRUE
)

```

## Plant

### PLANT

```{r}
#| label: 'PLANT',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_PLANT\\.csv$",   
  ohdest       = "DSCP_PLNT",
  verbose      = TRUE
)
```

## Sales Organization

### SALESORG

```{r}
#| label: 'SALESORG',
#| eval:   true

fTransform_csv_to_parquet(
  source_path  = file.path(PS01, SYS, "RTP"),
  output_path  = file.path(PS02, SYS, "RTP"),
  file_pattern = "^MD_SALES_ORG\\.csv$",   
  ohdest       = "DSCP_SORG",
  verbose      = TRUE
)
```


## Promotions

#### PromoNat

```{r}
#| label: 'PROMO'
#| eval:   true

REL_FLDS <- 
  wb_to_df(
    file  = file.path(PS01, "PRM", "PROMONAT.xlsx"),
    sheet = "FIELDS",
    cols  = c(2, 4, 5)
  )                         %>%
  setDT()                   %>%
  .[RELEVANT == "YES", COL] %>%
  sort()

PROMONAT <-
  wb_to_df(
    file  = file.path(PS01, "PRM", "PROMONAT.xlsx"),
    sheet = "PROMONAT",
    cols  = REL_FLDS
  )                                                           %T>%
  write_parquet(
    sink = file.path(
      PS02, "PRM", 
      "PROMONAT.parquet"
    )
  )                                                     

CR_PR_PROMO_CL2_HEADER <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL2_HEADER.CSV")
  )

CR_PR_PROMO_CL2_LINE <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL2_LINE.CSV")
  )

CR_PR_PROMO_CL3_HEADER <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL3_HEADER.CSV")
  )

CR_PR_PROMO_CL3_LINE <- 
  fread(
    file = file.path(PPRM, "CR_PR_PROMO_CL3_LINE.CSV")
  )
```
