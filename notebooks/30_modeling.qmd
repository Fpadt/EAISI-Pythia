---
title   : EAISI - Pythia
subtitle: MODELING
author  : "F.J. Padt"
date    : "`r format(Sys.time(), '%B %d, %Y')`"
output  :
  pdf_document:
    df_print: paged
    toc: yes
    toc_depth: 1      
editor_options:
  chunk_output_type: console
  markdown: 
    wrap: 80  
---

\newpage

![](../images/logo.png)

# Setup

```{r}
#| label: 'setup'
#| eval:   true

MATL <- pa_matn1_input('10023')
SORG <- 'FR30'

# public functions ---------------------------------------------------------
invisible(source("C:/RW/EAISI-Pythia/library/General.R"))
source("notebooks/99_initialization.R")

# location for generated figures
pimg <- file.path('.', 'fig')

```


# Transform

## Material/Salesorg Analysis

```{r}
#| label: 'Material Salesorg' 
#| eval:   false

dtMAT <- 
  copy(dtSLS)                            %>%
  .[MATERIAL == MATL & SALESORG == SORG] %>%
  .[, y:= Q]

 
```

# Modeling

## features

```{r}
#| label: 'TS Features'
#| eval: true

tsFT <- 
  tsMat %>%
  features(y, feature_set(pkgs = "feasts"))

```

## Forecast Materials/Plant

```{r}
#| label: 'FR30/10023'
#| eval: false

tsMat_act <- 
  tsSLS %>%
  filter(MATERIAL == MATL)

train <- 
  tsMat_act %>%
  filter(year(YM) <= 2023) 

test <- 
  tsMat_act  %>%
  filter(year(YM) == 2024)

# plot
tsMat_act %>%
  autoplot(.vars = ACT)

tsMat_act %>% 
  gg_season(ACT, period = "year")

# Fit model
tsMat_fit <- 
  train %>%
  model(
    Mean    = MEAN(ACT),
    `Naïve` = NAIVE(ACT),
    Drift   = NAIVE(ACT ~ drift())
  ) 

View(augment(tsMat_fit))

# Produce forecasts 
tsMat_fct <- 
  tsMat_fit                  %>%
  forecast(h = "12 months")  
  # %>% 
  # forecast(new_data = test)

tsMat_fct                    %>%
  autoplot(tsMat_act, level = NULL)

dtAC <- 
  accuracy(tsMat_fct, tsMat_act) %T>% 
  setDT()  

dtF <-
  tsMat_fct %T>%
  setDT()   %>%
  .[, .(MATERIAL, PLANT, VTYPE = '060', FTYPE = 2,
        SALESORG = 'FR30',
        CALMONTH = format(YM, "%Y%m"),
        VERSMON  = "202312",
        MODEL    = .model, Q = .mean)] %>%
  .[, STEP:= ((ymd(paste0(VERSMON, "01")) %--% ymd(paste0(CALMONTH, "01"))) 
    / months(1)) %>% as.integer()]
  
dtA <- copy(dtMat) %>% .[, MODEL:= ""]

dtACC <- 
  rbind(
    dtA[CALMONTH >= '202401'], 
    dtF, use.names = TRUE) %>%
  pa_model_accuracy(.act_ftype = 4, .fct_ftype = 2)

# alligns with the accuracy function from HYNDMAN
View(
  dtACC[, .(
    ME   = mean(E),
    RMSE = mean(E2) %>% sqrt(),
    MAE  = mean(AE),
    MPE  = mean(100*E/ACT),
    MAPE = mean(APE)
  ), 
  by = .(MATERIAL, PLANT, MODEL)])

# Plot the forecasts
tsMat_fct %>%
  autoplot( train, level = NULL) +
  autolayer(test, ACT, colour = pa_brand_color_get(7)) +
  labs(
    y        = "Sales ('000)",
    title    = "Historical Sales ",
    subtitle = paste(
      pa_matn1_output(MATL), "for", SORG)
  ) +
  guides(colour = guide_legend(title = "Forecast"))
```

## Cross Validation

```{r}
#| label: 'cross validation'
#| eval: true                  

tsMat_act <- 
  tsSLS
# %>%
#   filter(MATERIAL == MATL)

train <- 
  tsMat_act %>%
  filter(year(YM) <= 2023) 

train_cv <- 
  tsMat_act %>%
  filter(
    year(YM) >= 2021,
    YM       <  yearmonth("202412", format = "%Y%m")
    )       %>%
  stretch_tsibble(.init = 34, .step = 1)

# fOpen_as_xlsx(as.data.table(train_tr))


copy(train_cv)         %T>% 
  setDT()              %>%
  .[MATERIAL == MATL]  %>%
  dcast.data.table(
    .id ~ YM,
    fun.aggregate = sum,
    value.var = "ACT") %T>%
  View()

dtVERSMON_ID <- 
  copy(train_cv)        %T>% 
  setDT()                %>% 
  .[, .(VERSMON = max(YM) %>% format("%Y%m")), by = .(.id)]

# system.time({
#   fcMat <- 
#     train_tr                                       %>%
#     model(
#         `Mean`           = MEAN(ACT)          
#       , `Naïve`          = NAIVE(ACT)         
#       , `Seasonal naïve` = SNAIVE(ACT)
#       , `RW`             = RW(ACT ~ drift())
#       , `ETS`            = ETS(ACT)           
#       , `Trend Model`    = TSLM(ACT ~ trend())
#       # `Arima`          = ARIMA()
#     )                                              %>%
#     forecast(h = 12)  
# })

system.time({
  tsMat_fit <- 
    train_cv                                       %>%
    model(
        `100`             = MEAN(ACT)          
      , `110`             = NAIVE(ACT)         
      , `120`             = SNAIVE(ACT)
      , `130`             = RW(ACT ~ drift())
      , `140`             = ETS(ACT)           
      , `150`             = TSLM(ACT ~ trend())
      # `Arima`           = ARIMA()
    )    
})

tsMat_fct <- 
  tsMat_fit %>%
  forecast(h = 12)

# accuracy(tsMat, fcMat)

### Data table

VERSMON <- ymd("2022-12-01")

dtMat_fct <- 
  tsMat_fct                                  %T>% 
  setDT()                                     %>%
  .[, CALMONTH:= format(YM, "%Y%m")]          %>%
  .[CALMONTH %between% c('202401', '202412')] %>%
  dtVERSMON_ID[., on = .(.id)]                %>%
  .[,
    `:=` (
      VERSMON    = VERSMON, 
      VTYPE      = .model,
      FTYPE      = 2,
      MATERIAL   = pa_matn1_input(MATERIAL),
      CL3        = "",
      CL2        = "",
      CL1        = "",
      PLANT      = PLANT,
      SALESORG   = SORG,
      CALMONTH   = CALMONTH,
      DEMND_QTY  = .mean,
      BSELN_QTY  = 0,
      PROMO_QTY  = 0,
      DMDCP_QTY  = 0,
      PRMCP_QTY  = 0,
      BUOM       = "EA"
    )
  ] %>%
  .[, `:=` (
      STEP       = months_diff(VERSMON, CALMONTH),
      .id        = NULL,
      .model     = NULL,
      YM         = NULL,
      ACT        = NULL,
      .mean      = NULL
    )] %T>%
  setcolorder(
    c(
      "VERSMON",
      "VTYPE",
      "FTYPE",
      "MATERIAL",
      "CL3",
      "CL2",
      "CL1",
      "PLANT",
      "SALESORG", 
      "CALMONTH",
      "DEMND_QTY",
      "BSELN_QTY",
      "PROMO_QTY",
      "DMDCP_QTY",
      "PRMCP_QTY",
      "BUOM"
    )
  ) %T>%
  setorder(VERSMON, PLANT, MATERIAL) 

PATH_SLV_SLS <- pa_ds_stageing_path_get(
  .staging = "silver", 
  .functional_area = "sales", 
  "rtp"
)


  fwrite(
    file = "C:\\Users\\flori\\OneDrive\\ET\\pythia\\data\\test\\Platinum\\sales\\OUT_PA_DATA_POSTDR_FORECASTS.CSV",
    x     = dtMat_fct,
    sep   = ";",
    quote = FALSE
  )
  
# dtREP <- 
# +     copy(dtMod) %T>%
# +     setDT()    %T>%
# +     setnames(
# +       c('100', '110', '120', '130', '140','150'),
# +       c('mn' , 'A'  , 'B'  , 'C'  , 'ETS', 'TM')
# +       )

  # fOpen_as_xlsx(
  #   fcMat[.model == "Mean", CALMONTH:= format(year_month, "%Y%m")]
  # )
  
# Extract the ETS components into new columns
# dtREP[, error_type  := sapply(ETS, function(mod) mod$fit$spec$errortype)]
# dtREP[, trend_type  := sapply(ETS, function(mod) mod$fit$spec$trendtype)]
# dtREP[, season_type := sapply(ETS, function(mod) mod$fit$spec$seasontype)]  
# dtREP[, damped      := sapply(ETS, function(mod) mod$fit$spec$damped)]

```

```{r}
dtMat <- 
  copy(dtSLS)                            %>%
  .[MATERIAL == MATL & SALESORG == SORG] %>%
  .[, MODEL:= NA_character_]

dtAcc <- 
  copy(dtMat_fct) %>%
  .[, .(
    SALESORG,
    PLANT,
    MATERIAL,
    STEP,
    CALMONTH,
    VERSMON,
    FTYPE,     
    VTYPE = '060',
    MODEL = VTYPE,
    Q = DEMND_QTY 
  ) 
    ] %>%
    rbind(dtMat, use.names = TRUE) %>%
  pa_model_accuracy(.act_ftype = 4, .fct_ftype = 2) %>%
  .[CALMONTH %between% c("202401", "202412")]

 View(
   dtAcc[, .(EPA = mean(EPA, na.rm = TRUE)), by = .(STEP, MODEL)] %>%    
   dcast.data.table(MODEL ~ STEP)
 )
```

```{r}

WTB_CHAIN <- "https://bitest.wessanen.com:8002/sap/bc/ui2/flp?sap-language=EN&sap-client=500#BWProcessChain-change?chainId="



httr::BROWSE(paste0(WTB_CHAIN, "LC_TD_SD_DYNA_FRCT"))
httr::BROWSE("bwmt://WTB/sap/bw/modeling/dtpa/dtp_006eipubipunxghr7sqyu6zwv/m")
httr::BROWSE(paste0(WTB_CHAIN, "PA_POC"))
httr::BROWSE(paste0(WTB_CHAIN, "LC_TD_SD_DYNA_FRCT"))

```

```{r}
WTB_ADSO <- "https://bitest.wessanen.com:8002/sap/bc/ui2/flp?sap-language=EN&sap-client=500#BWDatastore-manage?adsoName="



httr::BROWSE(paste0(WTB_ADSO, "P_FRFPA"))
httr::BROWSE(paste0(WTB_ADSO, "SDSFRPR4"))
httr::BROWSE(paste0(WTB_ADSO, "SDMFRPR4"))
httr::BROWSE(paste0(WTB_ADSO, "SDMFRCAC"))
```

