---
title   : EAISI - Pythia
subtitle: Data Understanding
author  : "F.J. Padt"
date    : "`r format(Sys.time(), '%B %d, %Y')`"
output  :
  pdf_document:
    df_print: paged
    toc: yes
    toc_depth: 1      
editor_options:
  chunk_output_type: console
  markdown: 
    wrap: 80  
---

\newpage

![](../images/logo.png)

# Setup

```{r}
#| label: setup
#| eval:   true

# public functions ---------------------------------------------------------
invisible(source("C:/RW/EAISI-Pythia/library/General.R"))
source("notebooks/99_initialization.R")
source("C:/RW/EAISI-Pythia/notebooks/49.R")

# location for generated figures
pimg <- file.path('.', 'fig')

```

# Cust now data

```{r}
dt1 <- fread("C:\\PW\\OneDrive\\ET\\pythia\\data\\production\\Bronze\\sales\\SDSFRLV3_202501.csv")  %T>%
  setnames(c(
    "COMP_CODE" , "SALESORG"  , "PLANT",
    "MATERIAL"  , "CUST_HIE03", "CALMONTH",
    "VTYPE"     , "FTYPE"     , "VERSMON" ,
    "RECORDMODE", "UPD_DATE"  , 
    "CUST_HIE02", "CUST_HIE01", "DEMND_QTY",  "BSELN_QTY", 
    "PROMO_QTY" , "DMDCP_QTY" , "PRMCP_QTY",  "BASE_UOM")) %>%
  .[SALESORG == "FR30", .(
    MATERIAL, CUST_HIE01, CUST_HIE02, CUST_HIE03, CALMONTH, DEMND_QTY)] 
  
dt2 <- fread("C:\\PW\\OneDrive\\ET\\pythia\\data\\production\\Bronze\\sales\\SDSFRLV3_202412_2021.csv")  %T>%
  setnames(c(
    "COMP_CODE" , "SALESORG"  , "PLANT",
    "MATERIAL"  , "CUST_HIE03", "CALMONTH",
    "VTYPE"     , "FTYPE"     , "VERSMON" ,
    "RECORDMODE", "UPD_DATE"  , 
    "CUST_HIE02", "CUST_HIE01", "DEMND_QTY",  "BSELN_QTY", 
    "PROMO_QTY" , "DMDCP_QTY" , "PRMCP_QTY",  "BASE_UOM")) %>%
  .[SALESORG == "FR30", .(
    MATERIAL, CUST_HIE01, CUST_HIE02, CUST_HIE03, CALMONTH, DEMND_QTY)] 

dt <- rbind(dt1, dt2) %>%
  .[, CALMONTH:= as.character(CALMONTH)] %>%
  .[, Q:= DEMND_QTY] 

dtSLS <- 
  dtMATL[, .(
    MATERIAL, MATERIAL_TMD,
    PRDH1   , PRDH1_TMD,
    PRDH2   , PRDH2_TMD,
    PRDH3   , PRDH3_TMD,
    PRDH4   , PRDH4_TMD)
  ]                                                             %>%
  .[dt, on = .(MATERIAL)]  
```


# Analysis

## Graph Functions

```{r}
#| label: 'Graph functions'
#| eval:   false

fMP <- function(phl, IPH){
  fST(phl, IPH)
  fSL(phl, IPH)
  fBG(phl, IPH)
}

fST <- function(phl, IPH){
  
  tsSLS <- 
    IPH[, CALMONTH:= yearmonth(CALMONTH)]                            %>%
    as_tsibble(, index = "CALMONTH", 
               key= c("label", "SALESORG")) 
  
  tsSLS                                                              %>%
    features(Q, feat_stl)                                            %>%
    ggplot(
      aes(
        x     = trend_strength, 
        y     = seasonal_strength_year,
        label = label,
        col   = label)
    ) +
    geom_point() +
    geom_text_repel() +
    facet_wrap(~SALESORG) +
    theme(legend.position = "none") +
    scale_x_continuous(limits = c(0, 1.0)) +
    scale_y_continuous(limits = c(0, 1.0))
  
  ggsave(
    filename = paste(phl, 'season_trend.png', sep = '_'),
    device   = "png",
    path     = pimg,
    width    = 5000,
    height   = 3000,
    units    = "px"
  )

}

fSL <- function(phl, IPH){

  IPH %>%
    ggplot(
      aes(
        x   = CALMONTH, 
        y   = Q,
        col = SALESORG)
    ) +
    geom_line() +
    facet_wrap(
      ~label, 
      # scales = 'fixed'
      scales = 'free_y'
    )
  
  ggsave(
    filename = paste(phl, 'sales.png', sep = '_'),
    device   = "png",
    path     = pimg,
    width    = 5000,
    height   = 3000,
    units    = "px"
  )
}

fBG <- function(phl, IPH){

  IPH %>%
    .[, PROMO:= factor(PROMO, levels = c("0", "1"))] %>%
    ggplot(
      aes(
        x     = CALMONTH, 
        y     = Q,
        fill  = PROMO
        # ,
        # col   = PROMO
        )
      ,
      col  = "white",
      size = 0.1
    ) +
    geom_col() +
    facet_wrap(
      # nrow = 1,
      ~label, 
      # scales = 'fixed'
      scales = 'free_y'
    ) +
    theme(legend.position = "top") + # Move legend to the top +
    scale_fill_manual(values  = c("0" = pa_pa_ET_COLSS["CG"], "1" = pa_pa_ET_COLSS["YL"]))   
  # +
  #   scale_color_manual(values = c("0" = pa_pa_ET_COLSS["CG"], "1" = pa_pa_ET_COLSS["YL"])) 
  
  ggsave(
    filename = paste(phl, 'bar_sales.png', sep = '_'),
    device   = "png",
    path     = pimg,
    width    = 5000,
    height   = 3000,
    units    = "px"
  )
}
```

```{r}
#| label: Transform
#| eval: false

dtSLS <- 
  dtMATL[, .(
    MATERIAL, MATERIAL_TMD,
    PRDH1   , PRDH1_TMD,
    PRDH2   , PRDH2_TMD,
    PRDH3   , PRDH3_TMD,
    PRDH4   , PRDH4_TMD)
  ]                                                             %>%
  .[SLS, on = .(MATERIAL)]                                        
# %>%
#   MATS[, .(MATERIAL = MAT_SALES, SALESORG, PROMO = PRAT7)][          
#     ., on = .(MATERIAL, SALESORG)] 

```

### STL

```{r}
#| label: STL on Infusion tea
#| eval: false

ITEA <- 
  dtSLS[PRDH4 == '00100467',
       .(Q = sum(Q)/1000),
         by = .(label = PRDH4_TMD, CALMONTH)
  ]


  ]

tsTEA <- 
  ITEA[, year_month:= yearmonth(CALMONTH, '%Y%m')]         %>%
  as_tsibble(
    index = "year_month", 
    key = c("label")
  )                                                        %>%
  model(
    STL(
      Q ~ trend(window = 7) +
        season(window = "periodic"),
      robust = TRUE)
  )                                                        %>%
  components()                                             %>%
  autoplot() +
  theme(legend.position = "none") 


```

# ETS
## material - now

```{r}
mat <- "000000000003025448"
mat <- ''
mat <- 
cst <- ''
cst <- 

plotMAT_CST_ETS_AAA('000000000003025248', '31037')

plotMAT_CST_ETS_AAA('000000000003025447', '30975')
plotMAT_ETS_AAA('000000000003025447', '30936')
plotPH2_ETS_AAA('2020')

# plotMAT_CST_ETS_AAA('000000000003024349', '30995')
# plotMAT_ETS_AAA('000000000003024349')
# plotPH2_ETS_AAA('2020')

plotMAT_CST_ETS('000000000003025447', '30975') #A, N, N
plotMAT_ETS('000000000003025447', '30936') #M, N, N

plotPH2_ETS('2020',"#00BFC4") # M, N, M 	Hot Drinks             M, N , M
plotPH2_ETS('2030',"#00BA38") # M, N, M 	Dairy Alt             M, N , M
#plotPH2_ETS('2080') # M, N, M 	Juices and Cold Drinks A, N , N
plotPH2_ET('2080', "#619CFF") # M, N, M 	Juices and Cold Drinks   A, N , N
plotPH2_ET('2090', "#F8766D") # M, N, M 	Bread and Bakery         A, Ad, N
plotPH2_ETS('2010', "#F564E3") # M, N, M 	Sweets in Between      M, N , M
plotPH2_ETS('2040', "#B79F00") # M, N, M 	Breakfast Cereals
```

```{r}

  DT <- 
    dtSLS[PRDH2 == '2020' ,
          .(Q = sum(Q)),
          by = .(label = PRDH2_TMD, CALMONTH)
  ]  
  
  tsDT <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) 
  
# Fit an ETS model
fit <- tsDT %>%
  model(ETS(Q)) # Auto ETS

# Generate forecast with prediction intervals
forecast_data <- fit %>%
  forecast(h = 12)  # Forecasting next 12 periods

# Plot forecast with custom colors
forecast_data %>%
  autoplot(tsDT, level = c(80, 95)) +  # Include prediction intervals
  scale_color_manual(values = c(
    "Historical Data" = "#333333", 
    "Forecast" = "#0f5e3c")) +
  scale_fill_manual(values = c(
    "80%" = "#D9D9D9", 
    "95%" = "#F6A12D")) +
  labs(title = "ETS Forecast", x = "Time", y = "Value") +
  theme_minimal()

autoplot(forecast_data, tsDT) +
  scale_color_manual(values = c("black", "red"), 
                     labels = c("Historical Data", "Forecast")) +
  scale_fill_manual(values = c("red", "orange"), 
                    labels = c("80% PI", "95% PI")) +
  labs(title = "ETS Forecast", x = "Time", y = "Value") +
  theme_minimal() +
  guides(color = guide_legend(title = "Legend"), 
         fill = guide_legend(title = "Prediction Intervals"))


# Manually construct the plot using ggplot2
ggplot() +
  # Historical data line
  geom_line(data = tsDT, aes(x = year_month, y = Q, color = "Historical Data"), linewidth = 1) +
  # Forecasted values
  geom_line(data = forecast_data, aes(x = year_month, y = .mean, color = "Forecast"), size = 1) +
  # Prediction intervals (80% and 95%)
  geom_ribbon(data = forecast_data, aes(x = year_month, ymin = .lower, ymax = .upper, fill = "80% PI"), alpha = 0.3) +
  geom_ribbon(data = forecast_data, aes(x = year_month, ymin = .lower, ymax = .upper, fill = "95% PI"), alpha = 0.2) +
  # Custom colors for lines and fills
  scale_color_manual(values = c("Historical Data" = "black", "Forecast" = "blue")) +
  scale_fill_manual(values = c("80% PI" = "lightblue", "95% PI" = "lightgray")) +
  labs(title = "ETS Forecast", x = "Time", y = "Value", color = "Legend", fill = "Prediction Intervals") +
  theme_minimal()
```

# Prediction Int
```{r}


# Generate forecast with prediction intervals
forecast_data <- fit %>%
  forecast(h = 12) %>%
  mutate(
    lower_80 = quantile(Q, p = 0.10),  # Lower bound of 80% PI
    upper_80 = quantile(Q, p = 0.90),  # Upper bound of 80% PI
    lower_95 = quantile(Q, p = 0.025), # Lower bound of 95% PI
    upper_95 = quantile(Q, p = 0.975)  # Upper bound of 95% PI
  )

# Manually construct the plot using ggplot2
ggplot() +
  # Historical data line
  geom_line(data = tsDT, aes(x = year_month, y = Q, color = "Historical Data"), size = 2,  alpha = 0.6) +
  # Prediction intervals (80% and 95%)
  geom_ribbon(data = forecast_data, aes(x = year_month, ymin = lower_95, ymax = upper_95, fill = "95% PI"), alpha = 0.9) +  
  geom_ribbon(data = forecast_data, aes(x = year_month, ymin = lower_80, ymax = upper_80, fill = "80% PI"), alpha = 1) +
  # Forecasted values
  geom_line(data = forecast_data, aes(x = year_month, y = .mean, color = "Forecast"), size = 2, linetype = "dashed") +
  # Custom colors for lines and fills
  scale_color_manual(values = c(
    "Historical Data" = "#333333", 
    "Forecast"        = "#FFFFFF")
    ) +
  scale_fill_manual(values = c(
    "80% PI" = "#0f5e3c", 
    "95% PI" = "#F6A12D")
    ) +
  labs(title = "ETS Forecast", x = "year_month", y = "Value", color = "Legend", fill = "Prediction Intervals") +
  theme_minimal()

```

```{r}
# Create a data frame with x values and corresponding normal density
x <- seq(-4, 4, length.out = 1000)
y <- dnorm(x, mean = 0, sd = 1)
normal_df <- data.frame(x = x, y = y)

# Create the plot
ggplot(normal_df, aes(x = x, y = y)) +
  geom_line(color = "red", size = 3) +
  labs(
    title = "Standard Normal Distribution",
    x = "Value",
    y = "Density"
  ) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    panel.grid = element_blank(),
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    plot.title = element_text(hjust = 0.5)
  )
```


```{r}
plotMAT_CST_ETS_AAA <- function(mat, cst){

  DT <- 
    dtSLS[MATERIAL == mat & CUST_HIE03 == cst,
          .(Q = sum(Q)),
          by = .(label = MATERIAL_TMD, CALMONTH, CUST_HIE03)
  ]  
  
  tsDT_ets <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error("A") + trend("A") + season("A"))
    ) %>%
    # Extract components
    components() 
  
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, season, remainder, Q),
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend", "season"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = "#D9D9D9" , #"#2A77F5",
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#D9D9D9",#"#F6A12D",     # Trend component
      "season" = "#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "fixed") +
    theme_minimal() +
    labs(title = "ETS(A,A,A): error + trend + season",
         x = "Date",
         y = "Value", 
         subtitle = glue("{mat} - {cst}")
         ) +
           theme(legend.position = "none")
}

plotMAT_ETS_AAA <- function(mat,ph1){

  DT <- 
    dtSLS[MATERIAL == mat & CUST_HIE01 == ph1,
          .(Q = sum(Q)),
          by = .(label = MATERIAL_TMD, CALMONTH)
  ]  
  
  tsDT_ets <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error("A") + trend("A") + season("A"))
    ) %>%
    # Extract components
    components() 
  
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, season, remainder, Q),
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend", "season"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = "#F6A12D", #"#2A77F5",
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#F6A12D",     # Trend component
      "season" = "#F6A12D" #"#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "fixed") +
    theme_minimal() +
    labs(title = "ETS(A,A,A): error + trend + season",
         x = "Date",
         y = "Value", 
         subtitle = glue("{mat}")
         ) +
           theme(legend.position = "none")
}

plotPH2_ETS_AAA <- function(ph2){

  DT <- 
    dtSLS[PRDH2 == ph2 ,
          .(Q = sum(Q)),
          by = .(label = PRDH2_TMD, CALMONTH)
  ]  
  
  tsDT_ets <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error("A") + trend("A") + season("A"))
    ) %>%
    # Extract components
    components() 
  
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, season, remainder, Q),
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend", "season"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = "#0f5e3c",#"#2A77F5",
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#0f5e3c",#"#F6A12D",     # Trend component
      "season" = "#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "fixed") +
    theme_minimal() +
    labs(title = "ETS(A,A,A): error + trend + season",
         x = "Date",
         y = "Value", 
         subtitle = glue("{ph2}")
         ) +
           theme(legend.position = "none")
}
```

```{r}
plotMAT_CST_ETS <- function(mat, cst){

  DT <- 
    dtSLS[MATERIAL == mat & CUST_HIE03 == cst,
          .(Q = sum(Q)),
          by = .(label = MATERIAL_TMD, CALMONTH, CUST_HIE03)
  ]  
  
  tsETS <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error() + trend() + season())
    ) 
  
  tsDT_ets <- 
    tsETS %>%
    # Extract components
    components() 
  browser()
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, remainder, Q), #, season
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend"),
                              # levels = c("sales", "error", "trend", "season"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = "#D9D9D9" , #"#2A77F5",
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#D9D9D9"#,#"#F6A12D",     # Trend component
      # "season" = "#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "fixed") +
    theme_minimal() +
    labs(title = "ETS(A,A,A): error + trend + season",
         x = "Date",
         y = "Value", 
         subtitle = glue("{mat} - {cst}")
         ) +
           theme(legend.position = "none")
  
  # return(tsETS)
}

plotMAT_ETS <- function(mat,ph1){

  DT <- 
    dtSLS[MATERIAL == mat & CUST_HIE01 == ph1,
          .(Q = sum(Q)),
          by = .(label = MATERIAL_TMD, CALMONTH)
  ]  
  
  tsDT_ets <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error() + trend() + season())
    ) %>%
    # Extract components
    components() 
    browser()
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, season, remainder, Q),
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend", "season"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = "#F6A12D", #"#2A77F5",
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#F6A12D",     # Trend component
      "season" = "#F6A12D" #"#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "fixed") +
    theme_minimal() +
    labs(title = "ETS(A,A,A): error + trend + season",
         x = "Date",
         y = "Value", 
         subtitle = glue("{mat}")
         ) +
           theme(legend.position = "none")
}

plotPH2_ETS <- function(ph2, col){

  DT <- 
    dtSLS[PRDH2 == ph2 ,
          .(Q = sum(Q)),
          by = .(label = PRDH2_TMD, CALMONTH)
  ]  
  
  tsDT_ets <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error() + trend() + season())
    ) %>%
    # Extract components
    components() 
  # browser()
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, season, remainder, Q),
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend", "season"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = col,
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#F6A12D",     # Trend component
      "season" = "#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "free_y") +
    theme_minimal() +
    labs(title = attr(tsDT_ets,"method"),
         x = "Date",
         y = "Value", 
         subtitle = glue("{ph2}")
         ) +
           theme(legend.position = "none")
}

plotPH2_ET <- function(ph2, col){

  DT <- 
    dtSLS[PRDH2 == ph2 ,
          .(Q = sum(Q)),
          by = .(label = PRDH2_TMD, CALMONTH)
  ]  
  
  tsDT_ets <- 
    DT[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
    as_tsibble(
      index = "year_month", 
      key = c("label")
    ) %>%
    filter(year(year_month) >= 2021) %>%
    fill_gaps(Q =0, .full = TRUE) %>%
    # Fit an ETS model
    model(
      ETS = ETS(Q ~ error() + trend() + season())
    ) %>%
    # Extract components
    components() 
  # browser()
  tsDT_ets %>%
    filter(year(year_month) >= 2021) %>%
    pivot_longer(cols = c(level, remainder, Q),
                 names_to = "component", 
                 values_to = "value") %>%
    # Rename the components to match ETS terminology
    mutate(component = case_when(
      component == "level" ~ "trend",
      component == "remainder" ~ "error",
      component == "Q" ~ "sales", # Rename the original series
      TRUE ~ component
    )) %>%
    # Reorder the components as factors in the desired order
    mutate(component = factor(component, 
                              levels = c("sales", "error", "trend"),
                              ordered = TRUE)) %>%
    ggplot(aes(x = year_month, y = value, fill = component)) +
    # geom_line(linewidth = 3) +
    geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
    scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
      "sales"  = col,
      "error"  = "#D9D9D9",       # Error component
      "trend"  = "#F6A12D"#,     # Trend component
      # "season" = "#0f5e3c"      # Seasonal component   
    )) +
    facet_grid(component ~ ., scales = "free_y") +
    theme_minimal() +
    labs(title = attr(tsDT_ets,"method"),
         x = "Date",
         y = "Value", 
         subtitle = glue("{ph2}")
         ) +
           theme(legend.position = "none")
}
```

```{r}
# 2010 Sweets in Between  
# 2020, hot
# 2080 cold

ITEA <- 
  dtSLS[PRDH2 == '2010',
       .(Q = sum(Q)/1000),
         by = .(label = PRDH2_TMD, CALMONTH)
  ]

tsTEA_ets <- ITEA[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
  as_tsibble(
    index = "year_month", 
    key = c("label")
  ) %>%
  filter(year(year_month) >= 2021) %>%
  # Fit an ETS model
  model(
    ETS = ETS(Q ~ error("A") + trend("A") + season("A"))
  ) %>%
  # Extract components
  components() 

tsTEA_ets %>%
  filter(year(year_month) >= 2021) %>%
  pivot_longer(cols = c(level, season, remainder, Q),
               names_to = "component", 
               values_to = "value") %>%
  # Rename the components to match ETS terminology
  mutate(component = case_when(
    component == "level" ~ "trend",
    component == "remainder" ~ "error",
    component == "Q" ~ "sales", # Rename the original series
    TRUE ~ component
  )) %>%
  # Reorder the components as factors in the desired order
  mutate(component = factor(component, 
                           levels = c("sales", "error", "trend", "season"),
                           ordered = TRUE)) %>%
  ggplot(aes(x = year_month, y = value, fill = component)) +
  # geom_line(linewidth = 3) +
  geom_col(width = 30, color = "white") + # Adjust width as needed based on your date scale  
  scale_fill_manual(values = c(  # Changed from scale_color_manual to scale_fill_manual
    "sales"  = "#2A77F5",
    "error"  = "#D9D9D9",       # Error component
    "trend"  = "#F6A12D",     # Trend component
    "season" = "#0f5e3c"      # Seasonal component   
  )) +
  facet_grid(component ~ ., scales = "fixed") +
  theme_minimal() +
  labs(title = "ETS(A,A,A): error + trend + season",
       x = "Date",
       y = "Value") +
  theme(legend.position = "none")
```


```{r}
#| label: MAT
#| eval: false


MAT <- 
  dtSLS[PRDH4_TMD %like% "Rice Cakes Plain",
       .(Q = sum(Q)),
         by = .(MATERIAL_TMD, SALESORG, CALMONTH)
  ]

tsSLS <- 
  MAT[, year_month:= yearmonth(CALMONTH, '%Y%m')]          %>%
  .[, label:= MATERIAL_TMD ]                               %>%
  as_tsibble(
    index = "year_month", 
    key= c("label", "SALESORG")
  ) 

gp0M <- 
  tsSLS                                                    %>%
  features(Q, feat_stl)                                    %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = label,
      col   = label
    )
  ) +
  geom_point() +
  geom_text_repel() +
  # geom_text(aes(label = PRDH2_TMD),
  #           vjust = -1, hjust = 0.5,
  #           size = 12, size.unit = "pt"
  #           ) +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = "mat_season_trend.png",
  device   = "png",
  path     = pimg,
  width    = 2500,
  height   = 1500,  
  units    = "px"
)

```

```{r}
#| label: '?'
#| eval: FALSE

TST <- rbind(
  IPM[, .(SALESORG,  PLANT,  MATERIAL,  CALMONTH,  FTYPE,  VTYPE,  Q)], 
  DYN[, .(SALESORG,  PLANT,  MATERIAL,  CALMONTH,  FTYPE,  VTYPE,  Q)]) %>%
  dcast.data.table(
    ... ~ paste0("F_",FTYPE),
    fun.aggregate = sum,
    value.var = c("Q")
  ) %>% 
  .[, DIFF:= F_3 - F_1]


```

## PH1

```{r}
#| label: PH1 - Season Trend
#| eval: true

tot <-  dtSLS[, sum(Q)]

ph1 <- 
  dtSLS[, .(
    Q = sum(Q), 
    P = sum(Q)/tot
  ), 
  by = .(
    PRDH1, PRDH1_TMD
  )
  ]                   %T>% 
  setorder(-Q)        %>%
  .[, P:= cumsum(P)]  %>%
  .[1:11]             %>%  
  .[P < 0.97, PRDH1]       

phl <- paste("ph1", sep = "_")

IPH <- 
  dtSLS[PRDH1 %chin% ph1,
       .(Q = sum(Q)/1000000),
         by = .(label = PRDH1_TMD, SALESORG, PROMO, CALMONTH)
  ]

fBG(phl = 'ph1', IPH)

```

## PH2

```{r}
#| label: PH2 - Season Trend
#| eval: true

tot <-  IALL[, sum(DEMND_QTY)]

ph2 <- 
  IALL[, .(
    Q = sum(DEMND_QTY), 
    P = sum(DEMND_QTY)/tot
  ), 
  by = .(
    PRDH2, PRDH2_TMD
  )
  ] %T>% setorder(-Q) %>%
  .[, P:= cumsum(P)]  %>%
  .[1:6, PRDH2]
# %>%
#   .[P < 0.85, PRDH2]           

IPH <- 
  IALL[PRDH2 %chin% ph2,
       .(DEMND_QTY = sum(DEMND_QTY)/1000000),
         by = .(label = PRDH2_TMD, SALESORG, CALMONTH)
  ]

fMP(phl = 'ph2', IPH)

```

## PH3

```{r}
#| label: PH3 - Season Trend
#| eval: true

tot <-  IALL[, sum(DEMND_QTY)]

ph3 <- 
  IALL[, .(
    Q = sum(DEMND_QTY), 
    P = sum(DEMND_QTY)/tot
  ), 
  by = .(
    PRDH3, PRDH3_TMD
  )
  ] %T>% setorder(-Q) %>%
  .[, P:= cumsum(P)]  %>%
  .[1:10]             %>%
  .[P < 0.8, PRDH3]           

IPH <- 
  IALL[PRDH3 %chin% ph3,
       .(DEMND_QTY = sum(DEMND_QTY)/1000000),
         by = .(label = PRDH3_TMD, SALESORG, CALMONTH)
  ]

fMP(phl = 'ph3', IPH)

```

## PH4

```{r}
#| label: PH4 - Season Trend
#| eval: true

tot <-  IALL[, sum(DEMND_QTY)]

ph4 <- 
  IALL[, .(
    Q = sum(DEMND_QTY), 
    P = sum(DEMND_QTY)/tot
  ), 
  by = .(
    PRDH4, PRDH4_TMD
  )
  ] %T>% setorder(-Q) %>%
  .[, P:= cumsum(P)]  %>%
  .[1:12]             %>%
  .[P < 0.8, PRDH4]           

IPH <- 
  IALL[PRDH4 %chin% ph4,
       .(DEMND_QTY = sum(DEMND_QTY)/1000000),
         by = .(label = PRDH4_TMD, SALESORG, CALMONTH)
  ]

fMP(phl = 'ph4', IPH)

```

### AGG

```{r}
ITEA <- 
  IALL[PRDH4 == '00100467' & SALESORG == 'NL10']

fBG(
  phl = 'MSO', 
  IPH = ITEA[, .(DEMND_QTY = sum(DEMND_QTY)/1000),
             by = .(label = PRDH4_TMD, SALESORG, CALMONTH)
  ]
)

# MATERIAL
tot <- ITEA[, sum(DEMND_QTY)]
mat <- 
  ITEA[, 
       .(
         Q = sum(DEMND_QTY), 
         P = sum(DEMND_QTY)/tot
       ), 
       by = .(
         MATERIAL, MATERIAL_TMD
       )
  ]                   %T>% 
  setorder(-Q)        %>%
  .[, P:= cumsum(P)]  %>%
  .[1:3, MATERIAL] 

fBG(
  phl = 'NL10_MAT', 
  IPH = ITEA[MATERIAL %chin% mat,
             .(DEMND_QTY = sum(DEMND_QTY)/1000),
             by = .(label = MATERIAL_TMD, SALESORG, CALMONTH)
  ]
)

# Customer
IMAT <- ITEA[MATERIAL %chin% mat[1]]

tot <- IMAT[, sum(DEMND_QTY)]
cst <- 
  IMAT[, 
       .(
         Q = sum(DEMND_QTY), 
         P = sum(DEMND_QTY)/tot
       ), 
       by = .(
         CUSTOMER
       )
  ]                   %T>% 
  setorder(-Q)        %>%
  .[, P:= cumsum(P)]  %>%
  .[1:6, CUSTOMER] 

fBG(
  phl = 'NL10_Lemon_Ginger_CST', 
  IPH = ICST[CUSTOMER %chin% cst,
             .(DEMND_QTY = sum(DEMND_QTY)/1000),
             by = .(label = CUSTOMER, SALESORG, CALMONTH)
  ]
)
```

## MAT

```{r}
#| label: mat - Season Trend
#| eval: true

tot <-  IALL[, sum(DEMND_QTY)]

mat <- 
  IALL[, .(
    Q = sum(DEMND_QTY), 
    P = sum(DEMND_QTY)/tot
  ), 
  by = .(
    MAT = MATERIAL, MAT_TMD = MATERIAL_TMD
  )
  ] %T>% setorder(-Q) %>%
  .[, P:= cumsum(P)]  %>%
  .[1:12]        %>%
  .[P < 0.8, MAT]  

IPH <- 
  IALL[MATERIAL %chin% mat,
       .(DEMND_QTY = sum(DEMND_QTY)),
         by = .(label = MATERIAL_TMD, SALESORG, CALMONTH)
  ]

fMP(phl = 'mat', IPH)

```

#### Bjorg FR30 ST now

```{r}
#| label: FR30 - 
#| eval: true

dtST <- 
  dtSLS[!PRDH2 %chin% c('2100', '2120', '2070', '2110', '2050', '2060'),
        .(Q = sum(Q)/1000),
        by = .(label = PRDH2_TMD, CALMONTH)
  ]

tsST <- 
  dtST[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
  as_tsibble(
    index = "year_month", 
    key = c("label")
  ) %>%
  filter(year(year_month) >= 2021) 

tsST %>%
  features(Q, feat_stl)     %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = label,
      col   = label)
  ) +
  geom_point(size=3) +
  geom_text_repel(
    size = 6,
    force = 10,           # Increase repulsion force between labels
    point.padding = 1,    # Padding around points (units in mm)
    box.padding = 1,      # Padding around text boxes (units in mm)
    min.segment.length = 0,  # Draw leader lines even for close labels
    nudge_x = 0.00,       # Nudge labels horizontally
    nudge_y = 0.05,       # Nudge labels vertically
    max.overlaps = Inf,   # Allow all labels to be shown without omission
    segment.size = 0.5,   # Adjust line thickness
    segment.color = "grey50"  # Set line color
  ) +
  # facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))


```

## hot drinks

```{r}
#| label: FR30 - 
#| eval: true

dtST <- 
  dtSLS[, Q:= DEMND_QTY]  %>%
  .[PRDH1 == '10' & PRDH2 %chin% c('2020')]

tsST <- 
  dtST[, year_month := yearmonth(CALMONTH, '%Y%m')] %>%
  as_tsibble(
    index = "year_month", 
    key = c("MATERIAL", "CUST_HIE03")
  ) 

tsFT  <- 
  features(tsST, Q, feat_stl) 

tsST %>%
  features(Q, feat_stl)     %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = NA,
      col   = "red")
  ) +
  geom_point() +
  # geom_jitter(width = 5, height = 0, size = 1, alpha = 0.7) +
  # geom_text_repel() +
  # facet_wrap(~SALESORG) +
  theme(legend.position = "none") 
# +
#   scale_x_continuous(limits = c(0, 1.0)) +
#   scale_y_continuous(limits = c(0, 1.0))


```


```{r}
#| label: PH2 - Bjorg
#| eval: true

phl <- paste(ph1, sep = "_")

IPH2 <- 
  IALL[PRDH1 %chin% c(ph1),
       .(DEMND_QTY = sum(DEMND_QTY)),
         by = .(label = PRDH2_TMD, SALESORG, CALMONTH)
  ]

tsSLS <- 
  IPH2[, CALMONTH:= yearmonth(CALMONTH)]                             %>%
  as_tsibble(, index = "CALMONTH", 
             key= c("label", "SALESORG")) 

tsSLS                                                                %>%
  features(DEMND_QTY, feat_stl)                                      %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = label,
      col   = label)
  ) +
  geom_point() +
  geom_text_repel() +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = file.path('img', paste0(phl, '_season_trend.png')),
  device   = "png",
  path     = ".",
  width    = 2500,
  units    = "px"
)


IPH2 %>%
  .[, .(DEMND_QTY = sum(DEMND_QTY)),
         by = .(label, CALMONTH)]                                    %>%
  ggplot(
    aes(
      x = CALMONTH, 
      y = DEMND_QTY
      ), 
    col = "darkgreen"
    ) +
  geom_line() +
  facet_wrap(
    ~label, 
    # scales = 'fixed'
    scales = 'free_y'
    )

ggsave(
  filename = file.path('img', paste0(phl, '_sales.png')),
  device   = "png",
  path     = ".",
  width    = 2500,
  height   = 1500,
  units    = "px"
)
```

### Bjorg - PH3

```{r}
#| label: PH3
#| eval: true


IPH3 <- 
  IALL[PRDH1 %chin% c('08') & PRDH2_TMD %like% "Bread",
       .(DEMND_QTY = sum(DEMND_QTY)),
         by = .(label = PRDH3_TMD, SALESORG, CALMONTH)
  ]

tsSLS <- 
  IPH3[, CALMONTH:= yearmonth(CALMONTH)]                             %>%
  as_tsibble(, index = "CALMONTH", 
             key= c("label", "SALESORG")) 

tsSLS %>%
  features(DEMND_QTY, feat_stl) %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = label,
      col   = label)
  ) +
  geom_point() +
  geom_text_repel() +
  # geom_text(aes(label = PRDH2_TMD),
  #           vjust = -1, hjust = 0.5,
  #           size = 12, size.unit = "pt"
  #           ) +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = "ph3_08_season_trend.png",
  device   = "png",
  path     = ".",
  width    = 2500,
  height   = 1500,  
  units    = "px"
)

```

### BJORG PH4

```{r}
#| label: PH4
#| eval: true


IPH4 <- 
  IALL[PRDH1 %chin% c('08') & PRDH2_TMD %like% "Bread",
       .(DEMND_QTY = sum(DEMND_QTY)),
         by = .(label = PRDH3_TMD, SALESORG, CALMONTH)
  ]

tsSLS <- 
  IPH3[, CALMONTH:= yearmonth(CALMONTH)]                             %>%
  as_tsibble(, index = "CALMONTH", 
             key= c("label", "SALESORG")) 

tsSLS %>%
  features(DEMND_QTY, feat_stl) %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = label,
      col   = label)
  ) +
  geom_point() +
  geom_text_repel() +
  # geom_text(aes(label = PRDH2_TMD),
  #           vjust = -1, hjust = 0.5,
  #           size = 12, size.unit = "pt"
  #           ) +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = "ph3_08_season_trend.png",
  device   = "png",
  path     = ".",
  width    = 2500,
  height   = 1500,  
  units    = "px"
)

```

```{r}
#| label: PH4
#| eval: true


IPH4 <- 
  IALL[PRDH3_TMD %like% "Cereal Cakes",
       .(DEMND_QTY = sum(DEMND_QTY)),
         by = .(PRDH4_TMD, SALESORG, CALMONTH)
  ]

tsSLS <- 
  IPH4[, CALMONTH:= yearmonth(CALMONTH)]                             %>%
  .[, label:= PRDH4_TMD ] %>%
  as_tsibble(, index = "CALMONTH", 
             key= c("label", "SALESORG")) 

gp04 <- 
  tsSLS %>%
  features(DEMND_QTY, feat_stl) %>%
  ggplot(
    aes(
      x     = trend_strength, 
      y     = seasonal_strength_year,
      label = label,
      col   = label)
  ) +
  geom_point() +
  geom_text_repel() +
  # geom_text(aes(label = PRDH2_TMD),
  #           vjust = -1, hjust = 0.5,
  #           size = 12, size.unit = "pt"
  #           ) +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = "ph4_season_trend.png",
  device   = "png",
  path     = ".",
  width    = 2500,
  height   = 1500,  
  units    = "px"
)

```

```{r}

tsSLS <- 
  ISLS[, CALMONTH:= yearmonth(CALMONTH)] %>%
  as_tsibble(, index = "CALMONTH", key= c("PRDH1_TMD", "PRDH2_TMD", "SALESORG")) 
  

# tsSLS |>
#   features(DEMND_QTY, list(mean = mean)) |>
#   arrange(mean)
# 
# tsSLS |>
#   features(DEMND_QTY, feat_acf)
# 
# tsSLS |>
#   features(DEMND_QTY, feat_stl)

gp01 <- 
  tsSLS %>%
  features(DEMND_QTY, feat_stl) %>%
  ggplot(
    aes(
      x   = trend_strength, 
      y   = seasonal_strength_year,
      col = PRDH1_TMD)
  ) +
  geom_point() +
  geom_text(aes(label = PRDH1_TMD), vjust = -1, hjust = 0) +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = "ph1_season_trend.png",
  device   = "png",
  path     = ".",
  width    = 2500,
  units    = "px"
)
```

```{r}

tsSLS <- 
  ISLS[, CALMONTH:= yearmonth(CALMONTH)] %>%
  as_tsibble(, index = "CALMONTH", key= c("PRDH1_TMD", "PRDH2_TMD", "SALESORG")) 
  

gp02 <- 
  tsSLS %>%
  features(DEMND_QTY, feat_stl) %>%
  ggplot(
    aes(
      x   = trend_strength, 
      y   = seasonal_strength_year,
      col = PRDH1_TMD)
  ) +
  geom_point() +
  geom_text(aes(label = PRDH1_TMD), vjust = -1, hjust = 0) +
  facet_wrap(~SALESORG) +
  theme(legend.position = "none") +
  scale_x_continuous(limits = c(0, 1.0)) +
  scale_y_continuous(limits = c(0, 1.0))

ggsave(
  filename = "bjorg_ph2_season_trend.png",
  device   = "png",
  path     = ".",
  width    = 2500,
  units    = "px"
)
```

```{r}

tsSLS |>
  features(DEMND_QTY, feat_stl) |>
  filter(
    seasonal_strength_year == max(seasonal_strength_year, na.rm = TRUE)
  ) |>
  left_join(tsSLS, by = c("PRDH1_TMD", "PRDH2_TMD"), multiple = "all") |>
  ggplot(aes(x = CALMONTH, y = DEMND_QTY)) +
  geom_line() +
  labs(title = "CLIPPER (CUPPER)", subtitle = "Hot Drinks") 

# ISLS %>%
#   .[PRDH1_TMD == 'CLIPPER (CUPPER)'] %>%
#   ggplot(
#     aes(
#       x   = CALMONTH, 
#       y   = DEMND_QTY
#       ), col = "darkgreen"
#     ) +
#   geom_line() 

ISLS %>%
  .[, .(DEMND_QTY = sum(DEMND_QTY)), by = .(PRDH1_TMD, CALMONTH)] %>%
  ggplot(
    aes(
      x   = CALMONTH, 
      y   = DEMND_QTY
      ), col = "darkgreen"
    ) +
  geom_line() +
  facet_wrap(
    ~PRDH1_TMD, 
    # scales = 'fixed'
    scales = 'fixed'
    )



```

```{r}
prdh1_features <- 
  tsSLS |>
  features(DEMND_QTY, feature_set(pkgs = "feasts"))

tsSLS |>
  filter(PRDH1_TMD == "CLIPPER (CUPPER)") |>
  model(
    STL(DEMND_QTY ~ trend(window = 7) +
                   season(window = "periodic"),
    robust = TRUE)) |>
  components() |>
  autoplot() +
  theme(legend.position = "none")
```

# Stock Data

```{r}
#| label:  Stock Data
#| eval:   true

# Establish a connection to DuckDB
con <- dbConnect(duckdb::duckdb())

# Query the file and load it into a data.table
system.time({
  STCK <- 
    dbGetQuery(
      con, 
      paste0(
        "SELECT 
          * 
         FROM 
          read_parquet('", FN_STCK, "')
         WHERE 
          MATERIAL = '000000000000010023'"
      )
    )                                                                  %>%
    setDT()
  
  # View the data.table
  View(STCK[PLANT == 'FR30'])
})

# Disconnect from DuckDB
dbDisconnect(con)


```

```{r}

# # Execute the SQL query and load the result into a data.table
# system.time({
#   JOINED <- 
#     dbGetQuery(
#       con,
#       paste0(
#         "SELECT 
#           MATL.MATERIAL, 
#           MATL.MATERIAL_TMD, 
#           DATE_TRUNC('month', ISLS.CALDAY) AS CALMONTH, 
#           SUM(CAST(ISLS.SLS_QT_SO AS DOUBLE)) AS SLS_QT_SO
#          FROM 
#           read_parquet('", FN_ISLS, "') AS ISLS
#          INNER JOIN 
#           read_parquet('", FN_MATL, "') AS MATL
#          ON 
#           ISLS.MATERIAL = MATL.MATERIAL
#          WHERE 
#           MATL.PRDH1 = '08'
#          GROUP BY 
#           MATL.MATERIAL, 
#           MATL.MATERIAL_TMD, 
#           CALMONTH
#          ORDER BY 
#           CALMONTH"
#       )
#     ) %>%
#     setDT()
# })
# 
# # Check the result
# View(JOINED)

```

# Scoping

```{r}
#| label: 'Scoping',
#| eval:   true

# DD_HISTO_QTY <- DD_HISTO_QTY[SALESORG %chin% c('FR30', 'NL10')]
# 
# dtMATERIAL <- 
#   copy(MATERIAL)                                           %>%
#   .[PRDH1 %chin% 
#       c(
#         '07', # ALTER ECO
#         '08', # BJORG
#         '10', # CLIPPER (CUPPER)
#         '15', # ZONNATURA
#         '53', # TANOSHI
#         '65'  # NATURELA
#       )
#   ]                                                        %>%
#   MAT_SALES[., on = .(MAT_SALES == MATERIAL)]              %>%
#   .[SALESORG %chin% c("FR30", "NL10")]                     %>%
#   MAT_PLANT[., on = .(MAT_PLANT == MAT_SALES)]             %>%
#   .[, `:=` (MATERIAL = MAT_PLANT, MAT_PLANT = NULL)]       %T>%
#   setcolorder(c("MATERIAL", "SALESORG", "PLANT"))          %T>%
#   setkeyv(c("MATERIAL", "SALESORG", "PLANT"))

```

# Validation

## Actual Sales

### IPM

#### Open Hub

DSCP 2018 - actuals

```{r}
#| label:   'get_data_OH_IPM',
#| comment: 'OH_IPM002_A: IPM data from Open Hub'
#| eval:     false

# system.time({
#   
#   fLoad_Historical_Sales <- 
#     function(yr){
#       f <- 
#         file.path(PIPM, paste0("DD_HISTO_QTY_", yr, ".CSV"))
#       if(file.exists(f)){
#         fread(file = f, showProgress = TRUE)
#       } else {
#         data.table()
#       }
#     }
#   
#   OH_IPM002_A <- 
#     purrr::map(
#       c("2021", "2022", "2023", "2024"),
#       fLoad_Historical_Sales
#     )                                                                       %>%
#     rbindlist()                                                             %T>%
#     setnames(fGetOHFields("ZSOP_ASLS"))                                     %T>%
#     setnames(
#       c("MATERIAL_CODE", "SOLDTO_CODE", "PLANT_CODE", "SALESORG_CODE", "PERIOD"),
#       c("MATERIAL"     , "CUSTOMER"   , "PLANT"     , "SALESORG"     , "CALDAY")
#     )                                                                       %>%
#     .[, MATERIAL:= LP0(MATERIAL, 18)]                                       %>%
#     .[, CUSTOMER:= LP0(CUSTOMER, 10)]
#   # %>%
#   #   .[PLANT %chin% DSCP_AMB_PLANT]                                          %>%
#   #   .[CALDAY >= floor_date(today(), "year") - years(3)]                     %>%
#   #   .[!(IS_QT_SO == 0  & IS_QT_RET == 0 & IS_QT_FOC == 0 &
#   #       IS_QT_DIR == 0 & IS_QT_PRO == 0 & IS_QT_IC  == 0 & MSQTBUO == 0) ]
#   
# })

```

```{r}
#| label: 'get_data_BW_IPM',
#| eval:  false

# Active Data Table for DataStore IPM00 #### 
# B4_IPM002_A <- 
#    fRead_and_Union(
#      pSIDCLNT  = "WPB500",
#      pTable    = "/BIC/AIPM002",
#      pOptions  = list(
#        "CALDAY GE '20240101'", "AND",
#        "PLANT   EQ 'FR30'"
#      ),
#      pFields   = list(
#         "MATERIAL"        , # Material                            X
#         "CUSTOMER"        , # Customer number                     X
#         "PLANT"           , # Plant                               X
#         "SALESORG"        , # Sales Organization                  X
#         "CALDAY"          , # Calendar day                        X
#         # "RECORDMODE"      , #
#         # "BASE_UOM"        , # Base Unit of Measure
#         "/BIC/MSQTBUO"    , # Missed sales qty (BUOM)
#         "/BIC/IS_QT_SO"   , # Issued Qty: Sales Order
#         "/BIC/IS_QT_RET"  , # Issued Qty: Returns
#         "/BIC/IS_QT_FOC"  , # Issued Qty: Free of Charge
#         "/BIC/IS_QT_EXC"  , # Issued Qty: Excess Stock
#         "/BIC/IS_QT_DIR"  , # Issued Qty: Direct
#         "/BIC/IS_QT_PRO"  , # Issued Qty: Sales Order Promo Flag
#         "/BIC/IS_QT_IC"   #, # Issued Qty: InterCompany
#         # "MAT_SALES"       , # Material (Sales)
#         # "MAT_PLANT"       , # Material Plant
#         # "CUST_SALES"      , # Customer number (sales view)
#         # "DISTR_CHAN"      , # Distribution Channel
#         # "DIVISION"          # Division
#     ),
#      pRowcount = Inf
#    )
```

### SDSFRPR

```{r}
#| label:    'Data Ingestion FRPR'
#| eval:      false

# options(scipen=999)

# Establish a connection to DuckDB
con <- dbConnect(duckdb(), dbdir = ":memory:")

system.time({
  FRPR <- 
    dbGetQuery(
      con, 
      paste0(
        "SELECT 
          *
         FROM 
          read_parquet('", FN_FRPR, "')
         WHERE 
          SALESORG    IN ('FR30', 'NL10') AND
          MATERIAL = '000000000000010023'
         GROUP BY 
          ALL
         ORDER BY 
          SALESORG,
          CALMONTH"
      )
    )                                                                  %>%
    setDT()
  
})


```

```{r}
#| label:    'get_data_BW_SDSFRPR1',
#| comment:  'pre-DR Actuals',
#| eval:     false

# Active Data Table for DataStore SDSFRPR1 #### 
# B4_SDSFRPR12_A <- 
#    fRead_and_Union(
#      pSIDCLNT  = "WPB500",
#      pTable    = "/BIC/ASDSFRPR12",
#      pOptions  = list(
#        "CALMONTH     GE '202101'", "AND",
#        "CALMONTH     LE '202411'", "AND",
#        "/BIC/VERSMON EQ '202411'"
#      ),
#      pFields   = list(
#         "COMP_CODE"       , # Company code                 X
#         "SALESORG"        , # Sales Organization           X
#         "PLANT"           , # Plant                        X
#         "MATERIAL"        , # Material                     X
#         "CUST_HIE03"      , # Customer Hierarchy Level 3   X
#         "CALMONTH"        , # Calendar year/month          X
#         "VTYPE"           , # Value Type for Reporting     X
#         "/BIC/FTYPE"      , # Forecast Type                X
#         "/BIC/VERSMON"    , # Version Calendar year/month  X
#         "RECORDMODE"      , #
#         "UPD_DATE"        , # Update Date
#         "CUST_HIE02"      , # Customer Hierarchy Level 2
#         "CUST_HIE01"      , # Customer Hierarchy Level 1
#         "/BIC/DEMND_QTY"  , # Demand qty
#         "/BIC/BSELN_QTY"  , # Baseline qty
#         "/BIC/PROMO_QTY"  , # Promotion qty
#         # "/BIC/DMDCP_QTY"  , # Demand components qty
#         # "/BIC/PRMCP_QTY"  , # Promo components qty
#         "BASE_UOM"          # Base Unit of Measure
#     ),
#      pRowcount = Inf
#    )

```

### SDMDMFR1

#### B4 Extract

pre-demand actuals as-was

```{r}
#| label:   'get_data_BW_SDMDMFR12',
#| comment: 'pre-DR Actuals As-Was',
#| eval:    false

# Active Data Table for DataStore SDMFRPR1 #### 
# B4_SDMFRPR12_A <- 
#    fRead_and_Union(
#      pSIDCLNT  = "WPB500",
#      pTable    = "/BIC/ASDMFRPR12",
#      pOptions  = list(
#        "SALESORG     IN ('FR30', 'NL10')"
#      ),
#      pFields   = list(
#         # "COMP_CODE"       , # Company code                  X
#         "SALESORG"        , # Sales Organization            X
#         "PLANT"           , # Plant                         X
#         "MATERIAL"        , # Material                      X
#         "CUST_HIE03"      , # Customer Hierarchy Level 3    X
#         "CALMONTH"        , # Calendar year/month           X
#         # "VTYPE"           , # Value Type for Reporting      X
#         # "/BIC/FTYPE"      , # Forecast Type                 X
#         "/BIC/VERSMON"    , # Version Calendar year/month   X
#         # "RECORDMODE"      , #
#         # "UPD_DATE"        , # Update Date
#         "CUST_SALES"      , # Customer number (sales view)
#         "MAT_PLANT"       , # Material Plant
#         "MAT_SALES"       , # Material (Sales)
#         "DISTR_CHAN"      , # Distribution Channel
#         "CUSTOMER"        , # Customer number
#         "DIVISION"        , # Division
#         # "CALYEAR"         , # Calendar year
#         # "CALMONTH2"       , # Calendar month
#         # "CUST_HIE02"      , # Customer Hierarchy Level 2
#         # "CUST_HIE01"      , # Customer Hierarchy Level 1
#         "/BIC/DEMND_QTY"  , # Demand qty
#         "/BIC/BSELN_QTY"  , # Baseline qty
#         "/BIC/PROMO_QTY"  , # Promotion qty
#         # "/BIC/DMDCP_QTY"  , # Demand components qty
#         # "/BIC/PRMCP_QTY"  , # Promo components qty
#         "BASE_UOM"          # Base Unit of Measure
#     ),
#      pRowcount = Inf
#    )

```

### SDSFRPR2

Pre-demand Forecast Snapshots

```{r}
#| label   : 'get_data_OH_SDSFRPR2',
#| comment : "pre-DR Forecasts",
#| eval    : false

# options(scipen=999)
# 
# ppa_AREA <- "SDSFRPR2"
# SDSFRPR2 <- 
#   fLoadOpenHubExport(
#     ppa_AREA = ppa_AREA,  
#     # pKEY = c("CALDAY", "MATERIAL", "CUSTOMER", "PLANT"),
#     pPTH  = file.path(PDYN)
#   )                                                                       %>%
#   .[, !c("PRMCP_QTY", "DMDCP_QTY")]                                       %>%
#   .[SALESORG %chin% c("FR30", "NL10")]                                    %>%
#   .[, `:=` 
#     (
#       DEMND_QTY = fSignLeft(DEMND_QTY),
#       BSELN_QTY = fSignLeft(BSELN_QTY),
#       PROMO_QTY = fSignLeft(PROMO_QTY)
#     )
#   ]                                                                       %>%
#   .[, CHECK_QTY:= round(DEMND_QTY - BSELN_QTY - PROMO_QTY, 2)]                      
# 
# fOpen_as_xlsx(SDSFRPR1[ MATERIAL == LP0("10023", 18) & CHECK_QTY != 0])


  # .[, .(
  #   DEMND_QTY = sum(DEMND_QTY),
  #   BSELN_QTY = sum(BSELN_QTY),
  #   PROMO_QTY = sum(PROMO_QTY)
  # ), by = .(
  #   CALMONTH, 
  #   MATERIAL, 
  #   SALESORG, 
  #   PLANT,
  #   BASE_UOM
  # )
  # ]
```

# TransForm

```{r}
#| label: 'transform_dtIMP',
#| eval:  true

dtIMP <- 
  OH_IPM002_A[SALESORG %chin% c("FR30", "NL10")]                          %>%
  CUST_SALES[., on = .(CUST_SALES == CUSTOMER, SALESORG)]                 %>%
  .[, CALMONTH:= floor_date(CALDAY, "month")]                             %>%
  .[, .(
    SLS_QT_SO  = sum(as.numeric(IS_QT_SO) , na.rm = TRUE), 
    SLS_QT_RET = sum(as.numeric(IS_QT_RET), na.rm = TRUE),
    SLS_QT_FOC = sum(as.numeric(IS_QT_FOC), na.rm = TRUE), 
    SLS_QT_DIR = sum(as.numeric(IS_QT_DIR), na.rm = TRUE), 
    SLS_QT_PRO = sum(as.numeric(IS_QT_PRO), na.rm = TRUE),
    SLS_QT_IC  = sum(as.numeric(IS_QT_IC) , na.rm = TRUE), 
    MSQTBUO    = sum(as.numeric(MSQTBUO)  , na.rm = TRUE)
  ), by = 
    .(
      MATERIAL  , 
      CUST_HIE03,      
      PLANT     ,
      SALESORG  , 
      CALMONTH
    )
  ]                                                                       %>%
    .[, DEMND_QTY:= 
        SLS_QT_SO + 
        # SLS_QT_RET + 
        SLS_QT_FOC + 
        SLS_QT_DIR + 
        # SLS_QT_PRO + 
        SLS_QT_IC
    ]                                                                     %>%
  # .[, .(
  #   CALMONTH   = CALMONTH,
  #   MATERIAL   = pa_matn1_output(MATERIAL),
  #   CUST_HIE03 = pa_matn1_output(CUST_HIE03),
  #   SALESORG   = SALESORG,
  #   PLANT      = PLANT,
  #   DEMND_QTY  = DEMND_QTY
  # )
  # ]                                                                       %>%
  # .[, TYPE:= 'IMP']
```

## Comparison Actuals

```{r}
#| label: 'dtCMP',
#| eval:  true


dtCMP <-
  copy(B4_SDMFRPR12_A)                                                    %>%
  # copy(SDSFRPR1)                                                          %>%
  .[, .(
    CALMONTH   = ymd(paste0(CALMONTH, "01")),
    MATERIAL   = MATERIAL,
    CUST_HIE03 = CUST_HIE03,
    SALESORG   = SALESORG,
    PLANT      = PLANT,
    DEMND_QTY  = DEMND_QTY  
  )]                                                                      %>%
  .[, TYPE:= 'FP1']                                                       %>%
  rbind(
    dtIMP[CALMONTH < ymd("2024-11-01"), .(
      CALMONTH   = CALMONTH,
      MATERIAL   = MATERIAL,
      CUST_HIE03 = CUST_HIE03,
      SALESORG   = SALESORG,
      PLANT      = PLANT,
      DEMND_QTY  = DEMND_QTY,
      TYPE       = 'IMP'
    )],
    .,
    use.names = TRUE
  )                                                                       %>%
  dcast.data.table(
    ... ~ TYPE, 
    fun.aggregate = sum,
    value.var     = "DEMND_QTY"
  )                                                                       %>%
  .[, `:=` 
    (
    DIFF    = IMP - FP1,
    FP1_DEC = (as.integer(FP1) == FP1),
    IMP_DEC = (as.integer(IMP) == IMP)
  )
  ]                                                                       %>%
  .[round(DIFF,0) != 0]                                          
```

```{r}
dtNL10 <- 
  OH_IPM002_A %>%
  .[SALESORG == 'NL10' &
      CALDAY >= ymd("2024-01-01")] %>%
  CUST_SALES[, .(CUST_SALES, SALESORG, CUST_HIE03)][
    ., on = .(CUST_SALES == CUSTOMER, SALESORG)]  %>%
  .[is.na(CUST_HIE03)]
```

```{r}
dtACT <-
  DD_HISTO_QTY[, CUSTOMER:= LP0(CUSTOMER, 10)]       %>%
  CUST[., on = c("CUSTOMER", "SALESORG")]            %>%
  .[, CALMONTH:= floor_date(CALDAY, "month")]        %>%
  .[, .(
    SLS_QT_SO  = sum(as.numeric(SLS_QT_SO) , na.rm = TRUE), 
    SLS_QT_RET = sum(as.numeric(SLS_QT_RET), na.rm = TRUE), 
    SLS_QT_FOC = sum(as.numeric(SLS_QT_FOC), na.rm = TRUE), 
    SLS_QT_DIR = sum(as.numeric(SLS_QT_DIR), na.rm = TRUE), 
    SLS_QT_PRO = sum(as.numeric(SLS_QT_PRO), na.rm = TRUE), 
    SLS_QT_IC  = sum(as.numeric(SLS_QT_IC) , na.rm = TRUE), 
    MSQTBUO    = sum(as.numeric(MSQTBUO)   , na.rm = TRUE)
  ),
    by = .(CALMONTH, MATERIAL, CUST_HIE03, SALESORG, PLANT)
  ] %>%
  .[, DEMND_QTY:= 
      SLS_QT_SO + 
      # SLS_QT_RET + 
      SLS_QT_FOC + 
      SLS_QT_DIR + 
      # SLS_QT_PRO + 
      SLS_QT_IC
    ]

# cols <- intersect(names(B4_SDSFRPR12_A), names(dtACT))
```

```{r}
dtCMP2 <- 
  dtCMP[CALMONTH < ymd("20241101")] %>%
  .[, .(
    SC_113B = sum(SC_113B),
    SC_113E = sum(SC_113E),
    SOURCE  = sum(SOURCE)
    ),
    by = .(CALMONTH, MATERIAL, SALESORG, PLANT)
  ] %>%
  .[, DIFF:= SOURCE - SC_113B] %>%
  .[DIFF != 0]
  
```

```{r}
dtNIXTLA <- 
  dtACT[MATERIAL == "10023" & PLANT == "FR30"] %>%
  .[, .(y = sum(DEMND_QTY)), 
    by = .(
      unique_id = paste(PLANT, MATERIAL, sep = "_"), 
      ds = CALMONTH
      )
    ] %T>%
  fwrite(
    file = file.path(PYTH, "FR30_10023.csv")
  )
```
